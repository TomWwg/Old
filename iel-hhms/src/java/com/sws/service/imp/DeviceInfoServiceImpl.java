package com.sws.service.imp;import java.util.ArrayList;import java.util.List;import org.hibernate.criterion.DetachedCriteria;import org.hibernate.criterion.MatchMode;import org.hibernate.criterion.Order;import org.hibernate.criterion.Restrictions;import org.springframework.beans.factory.annotation.Autowired;import com.gk.extend.hibernate.entity.QueryEntity;import com.gk.extend.hibernate.template.PageHibernateTemplate;import com.sws.dao.DeviceInfoDao;import com.sws.dao.GroupTreeDao;import com.sws.model.DeviceInfo;import com.sws.model.GroupTree;import com.sws.service.DeviceInfoService;import com.sys.core.util.CollectionUtils;import com.sys.core.util.StringUtils;import com.sys.core.util.bean.Page;//@Service("staffInfoService")public class DeviceInfoServiceImpl implements DeviceInfoService {    	@Autowired    private DeviceInfoDao deviceInfoDao;	@Autowired    private GroupTreeDao groupTreeDao;	@Autowired	private PageHibernateTemplate pageHibernateTemplate;		@Override	public DeviceInfo getById(Long id) {		return deviceInfoDao.get(id);	}	@Override	public void save(DeviceInfo info) {		deviceInfoDao.save(info);	}	@Override	public void update(DeviceInfo info) {		deviceInfoDao.merge(info);	}	@Override	public void deleteAll(String ids) {		if (StringUtils.isNotBlank(ids)) {            List<Long> idList = CollectionUtils.toLongList(ids);            if (CollectionUtils.isNotEmpty(idList)) {                for (Long id : idList) {                	deviceInfoDao.deleteById(id);                }            }        }	}	@Override	public Page page(String departIds,QueryEntity queryEntity, int start, int limit,String sortname,String sortorder) {		DetachedCriteria detachedCriteria = DetachedCriteria.forClass(DeviceInfo.class);		if(!departIds.equals("1")){//管理员的部门ID是1,非管理员			detachedCriteria.add(Restrictions.eq("departId",Long.valueOf(departIds)));		}		if(StringUtils.isNotBlank(queryEntity.getStr3())&&!queryEntity.getStr3().equals("-1")){			detachedCriteria.add(Restrictions.eq("type", queryEntity.getStr3()));		}		if(StringUtils.isNotBlank(queryEntity.getStr1())){			detachedCriteria.add(Restrictions.like("no", queryEntity.getStr1(),MatchMode.ANYWHERE));		}		if(queryEntity.getStr2()!=null){			detachedCriteria.add(Restrictions.like("name", queryEntity.getStr2(),MatchMode.ANYWHERE));		}		if (sortorder.toLowerCase().equals("asc")) {			detachedCriteria.addOrder(Order.asc(sortname));		} else {			detachedCriteria.addOrder(Order.desc(sortname));		};		List<Long> groupIds = new ArrayList<Long>();		if(StringUtils.isNotBlank(queryEntity.getTreeId())&&!queryEntity.getTreeId().equals("1")){			detachedCriteria.add(Restrictions.eq("groupTree.id", Long.valueOf(queryEntity.getTreeId())));		}else{			String[] array = departIds.split("\\*");			if(!departIds.equals("1")){//非最高级别的管理员				for(String dId:array){					groupIds.add(Long.valueOf(dId));					List<GroupTree> roomList = groupTreeDao.findBy("parentId", Long.valueOf(dId));//下面的病房					List<Long> roomIds = new ArrayList<Long>();					for(GroupTree room:roomList){						roomIds.add(room.getId());						groupIds.add(room.getId());					}					if(roomIds.size()>0){						List<GroupTree> bedList = groupTreeDao.findByParentIds(roomIds); //下面的病床						for(GroupTree bed:bedList){							groupIds.add(bed.getId());						}					}				}			}		}		Page page = pageHibernateTemplate.pageByDetachedCriteria(detachedCriteria, start, limit);		return page;	}	@Override	public DeviceInfo findByNoType(String no, String type) {		return deviceInfoDao.findByNoType(no, type);	}	@Override	public Page pageByDLevel(List<String> manageDepart, String departIds,			QueryEntity queryEntity, int start, int limit, String sortname,			String sortorder) {		DetachedCriteria detachedCriteria = DetachedCriteria.forClass(DeviceInfo.class);		if(!manageDepart.contains(departIds)){//非管理部门			detachedCriteria.add(Restrictions.eq("departId",Long.valueOf(departIds)));		}		if(StringUtils.isNotBlank(queryEntity.getStr3())&&!queryEntity.getStr3().equals("-1")){			detachedCriteria.add(Restrictions.eq("type", queryEntity.getStr3()));		}		if(StringUtils.isNotBlank(queryEntity.getStr1())){			detachedCriteria.add(Restrictions.like("no", queryEntity.getStr1(),MatchMode.ANYWHERE));		}		if(queryEntity.getStr2()!=null){			detachedCriteria.add(Restrictions.like("name", queryEntity.getStr2(),MatchMode.ANYWHERE));		}		if (sortorder.toLowerCase().equals("asc")) {			detachedCriteria.addOrder(Order.asc(sortname));		} else {			detachedCriteria.addOrder(Order.desc(sortname));		};		List<Long> groupIds = new ArrayList<Long>();		if(StringUtils.isNotBlank(queryEntity.getTreeId())&&!queryEntity.getTreeId().equals("1")){			detachedCriteria.add(Restrictions.eq("groupTree.id", Long.valueOf(queryEntity.getTreeId())));		}else{			String[] array = departIds.split("\\*");			if(!manageDepart.contains(departIds)){//非管理部门				for(String dId:array){					groupIds.add(Long.valueOf(dId));					List<GroupTree> roomList = groupTreeDao.findBy("parentId", Long.valueOf(dId));//下面的病房					List<Long> roomIds = new ArrayList<Long>();					for(GroupTree room:roomList){						roomIds.add(room.getId());						groupIds.add(room.getId());					}					if(roomIds.size()>0){						List<GroupTree> bedList = groupTreeDao.findByParentIds(roomIds); //下面的病床						for(GroupTree bed:bedList){							groupIds.add(bed.getId());						}					}				}			}		}		Page page = pageHibernateTemplate.pageByDetachedCriteria(detachedCriteria, start, limit);		return page;	}	@Override	public List<DeviceInfo> findByDepartId(Long departId) {		List<DeviceInfo> deviceInfos = deviceInfoDao.findByDepartId(departId);		return deviceInfos;	}	@Override	public List<DeviceInfo> findAll() {		List<DeviceInfo> deviceInfos = deviceInfoDao.findAll();		return deviceInfos;	}	@Override	public com.sws.common.entity.GroupTree findByTreeId(Integer id) {		List<com.sws.model.GroupTree> groupTree1 = deviceInfoDao.findByTreeId(id);		com.sws.common.entity.GroupTree g = new com.sws.common.entity.GroupTree(groupTree1.get(0));		List<com.sws.model.GroupTree> groupTree2 = deviceInfoDao.findByTreeId(g.getParentId().intValue());		g.setParentName(groupTree2.get(0).getName());		return g;	}	@Override	public List<String> getRFIDByCategory(List<Long> staffIds) {		List<String> list = deviceInfoDao.getRFIDByStaffIds(staffIds);		return list;	}}