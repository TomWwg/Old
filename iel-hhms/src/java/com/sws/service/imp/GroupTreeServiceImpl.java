package com.sws.service.imp;import java.util.ArrayList;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import com.gk.essh.util.tree.TreeNode;import com.sws.dao.GroupTreeDao;import com.sws.dao.UserInfoDao;import com.sws.model.GroupTree;import com.sws.service.GroupTreeService;import com.sys.core.util.CollectionUtils;import com.sys.core.util.StringUtils;//@Service("staffInfoService")public class GroupTreeServiceImpl implements GroupTreeService {    	@Autowired    private GroupTreeDao groupTreeDao;	@Autowired    private UserInfoDao userInfoDao;	@Override	public GroupTree getById(Long id) {		// TODO Auto-generated method stub		return groupTreeDao.get(id);	}	@Override	public void save(GroupTree info) {		// TODO Auto-generated method stub		groupTreeDao.save(info);	}	@Override	public void update(GroupTree info) {		// TODO Auto-generated method stub		groupTreeDao.update(info);	}	@Override	public void deleteAll(String ids) {		// TODO Auto-generated method stub		if (StringUtils.isNotBlank(ids)) {            List<Long> idList = CollectionUtils.toLongList(ids);            if (CollectionUtils.isNotEmpty(idList)) {                for (Long id : idList) {                	groupTreeDao.deleteById(id);                }            }        }	}	/**	 * 用户下的分组树返回前台显示	 * @param rootNode 父节点	 * @param list 子节点集	 */	public void getChildren(TreeNode rootNode, List<GroupTree> list, Boolean isTreeOpen) {		if (null != rootNode && null != list) {			for (GroupTree groupTree : list) {				// 过滤根节点，每次只处理当前节点的子节点				if (null != groupTree.getParentId() && rootNode.getId().equals(groupTree.getParentId().toString())) {					TreeNode treeNode = new TreeNode();					if(groupTree.getType().equals(0)){ //科室						treeNode.setCls("depart");					}else if(groupTree.getType().equals(1)){//病房						treeNode.setCls("room");					}else if(groupTree.getType().equals(2)){//病床						treeNode.setCls("bed");					}					treeNode.setId(groupTree.getId().toString());					treeNode.setLabel(groupTree.getName());					treeNode.setParentId(rootNode.getId());					if (null == isTreeOpen) {						treeNode.setOpen(false);					}					else {						treeNode.setOpen(isTreeOpen);					}					rootNode.addChildren(treeNode);					getChildren(treeNode, list, isTreeOpen);				}			}		}	}	private List<GroupTree> computeList(List<String> manageDeparts,String departIds, boolean onlyDepart){		String[] array = departIds.split("\\*");		List<GroupTree> groupTreeList = new ArrayList<GroupTree>();		if(onlyDepart){ //仅仅显示部门			if(manageDeparts!=null&&manageDeparts.contains(departIds)){//最高级别的管理员				List<Integer> types = new ArrayList<Integer>();				types.add(0);				groupTreeList = groupTreeDao.findByTypes(types);			}else{				List<Long> ids = new ArrayList<Long>();				ids.add(1L);				for(String dId:array){					ids.add(Long.valueOf(dId));				}				groupTreeList = groupTreeDao.findAllEntitysByIds(ids);			}		}else{			if(manageDeparts.contains(departIds)){//管理部门				groupTreeList = groupTreeDao.getAll();			}else{				List<Long> ids = new ArrayList<Long>();				ids.add(1L);				for(String dId:array){					ids.add(Long.valueOf(dId));					List<GroupTree> roomList = groupTreeDao.findBy("parentId", Long.valueOf(dId));//下面的病房					List<Long> roomIds = new ArrayList<Long>();					for(GroupTree room:roomList){						roomIds.add(room.getId());						groupTreeList.add(room);					}					if(roomIds.size()>0){						List<GroupTree> bedList = groupTreeDao.findByParentIds(roomIds); //下面的病床						for(GroupTree bed:bedList){							groupTreeList.add(bed);						}					}				}				List<GroupTree> departList = groupTreeDao.findAllEntitysByIds(ids);				groupTreeList.addAll(departList);			}		}		return groupTreeList;	}	public TreeNode getTree(List<String> manageDeparts,String departIds, boolean onlyDepart, Boolean isTreeOpen) {		TreeNode tree = new TreeNode();		List<GroupTree> groupTreeList = computeList(manageDeparts,departIds,onlyDepart);		for (GroupTree groupTree : groupTreeList) {			if(groupTree.getId().equals(1L)){				 //无法修改tree属性,现判断如果当前用户部门ID为管理部门,就把当前用户部门ID赋值为1,在前端1表示管理部门,显示医院节点				if(manageDeparts!=null&&manageDeparts.contains(departIds)){					departIds="1";				}				tree.setParentId(departIds);//此属性暂时用来添加部门ID,前端用来判断默认节点,级别高的用户默认显示医院节点,级别低用户默认显示本部门节点				tree.setId(groupTree.getId().toString());				tree.setLabel(groupTree.getName());				tree.setCls("hospital"); //图标				tree.setOpen(true);				getChildren(tree, groupTreeList, isTreeOpen);				break;			}		}		return tree;	}	@Override	public List<GroupTree> getDepart() {		// TODO Auto-generated method stub		List<GroupTree> groupTreeList =null;		groupTreeList = groupTreeDao.getDepart();		return groupTreeList;	}	@Override	public void saveAll(List<GroupTree> list) {		// TODO Auto-generated method stub		groupTreeDao.saveAll(list);	}	@Override	public List<GroupTree> getUserDepart() {		// TODO Auto-generated method stub		return groupTreeDao.getUserDepart();	}	@Override	public List<String> getManageDeparts() {		// TODO Auto-generated method stub		return groupTreeDao.getManageDeparts();	}}