package com.sws.service.imp;import java.util.ArrayList;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.gk.essh.util.tree.TreeNode;import com.gk.extend.hibernate.entity.QueryEntity;import com.sws.bo.MenuBo;import com.sws.dao.MenuInfoDao;import com.sws.dao.RoleInfoDao;import com.sws.dao.UserInfoDao;import com.sws.model.MenuInfo;import com.sws.model.RoleInfo;import com.sws.model.UserInfo;import com.sws.service.RoleInfoService;import com.sys.core.util.CollectionUtils;import com.sys.core.util.StringUtils;import com.sys.core.util.bean.Page;@Servicepublic class RoleInfoServiceImpl implements RoleInfoService {    	@Autowired    private RoleInfoDao roleInfoDao;	@Autowired    private MenuInfoDao menuInfoDao;	@Autowired    private UserInfoDao userInfoDao;	@Override	public RoleInfo getById(Long id) {		return roleInfoDao.get(id);	}	@Override	public void save(RoleInfo info) {		roleInfoDao.save(info);	}	@Override	public void update(RoleInfo info) {		roleInfoDao.update(info);	}	@Override	public void deleteAll(String ids) {		if (StringUtils.isNotBlank(ids)) {            List<Long> idList = CollectionUtils.toLongList(ids);            if (CollectionUtils.isNotEmpty(idList)) {                for (Long id : idList) {                	roleInfoDao.deleteById(id);                }            }        }	}	@Override	public Page page(QueryEntity queryEntity, int start, int limit,String sortname,String sortorder) {		List<String> paramList = new ArrayList<String>();		List<Object> valueList = new ArrayList<Object>();		if(StringUtils.isNotBlank(queryEntity.getStr1())){			paramList.add("no");			valueList.add(queryEntity.getStr1());		}		if(StringUtils.isNotBlank(queryEntity.getStr2())){			paramList.add("name");			valueList.add(queryEntity.getStr2());		}		 Page page = roleInfoDao.page(paramList.toArray(new String[paramList.size()]), valueList.toArray(),start, limit, sortname,				 sortorder.toLowerCase().equals("asc")?true:false);		return page;	}    private boolean isRoleInfo(String mId, String menueIds){    	if(menueIds!=null){    		String[] menueIdArray = menueIds.split(",");			for(String menuId:menueIdArray){				if(menuId.equals(mId)){					return true;				}			}    	}    	return false;    	    }	/**	 * 菜单树回前台显示	 * @param rootNode 父节点	 * @param list 子节点集	 */    private void getChildren(TreeNode rootNode, List<MenuInfo> list,String mIds) {		if (null != rootNode && null != list) {			for (MenuInfo menu : list) {				// 过滤根节点，每次只处理当前节点的子节点				if (null != menu.getParentId() && rootNode.getId().equals(menu.getParentId().toString())) {					TreeNode treeNode = new TreeNode();					treeNode.setCls("room");					treeNode.setId(menu.getId().toString());					treeNode.setLabel(menu.getName());					treeNode.setParentId(rootNode.getId());					treeNode.setOpen(true);					if (isRoleInfo(menu.getId().toString(), mIds)) {						treeNode.setChecked(true);					} else {						treeNode.setChecked(false);					}					rootNode.addChildren(treeNode);					getChildren(treeNode, list,mIds);				}			}		}	}	@Override	public TreeNode getMuneTree(Long roleId) {		String mIds=null;		TreeNode tree = new TreeNode();		List<MenuInfo> menuList = menuInfoDao.getAll();		RoleInfo roleInfo = getById(roleId);		if(roleInfo!=null&&roleInfo.getMenuIds()!=null){			mIds= roleInfo.getMenuIds();		}		tree.setId("1");		tree.setLabel("全部");		tree.setCls("home"); //图标		tree.setOpen(true);		getChildren(tree, menuList, mIds);		return tree;	}	@Override	//public List<MenuBo> getMuneList(Long userId) {	public List<MenuInfo> getMuneList(Long userId) {		List<MenuInfo> menuList = null;//二级菜单的list		List<Long> menueIdList = new ArrayList<Long>(); 		UserInfo userInfo = userInfoDao.findUniqueBy("id", userId);		if(userInfo!=null&&userInfo.getRoleInfo().getId()!=null){			RoleInfo roleInfo = roleInfoDao.findUniqueBy("id", userInfo.getRoleInfo().getId());			if(roleInfo!=null&&roleInfo.getMenuIds()!=null){				String[] menueIdArray = roleInfo.getMenuIds().split(",");				for(String menuId:menueIdArray){					menueIdList.add(Long.valueOf(menuId));				}				if(menueIdList.size()>0){					menuList = menuInfoDao.findAllEntitysBy("id", menueIdList);				}			}		}		return menuList;//		if(menuList!=null&&menuList.size()>0){//			List<MenuBo> oneList = new ArrayList<MenuBo>();//第一级菜单//			MenuBo front = new MenuBo(0, 0, "首页", "goHomeInfo.action", 1, 0, 0);//			MenuBo system = new MenuBo(1, 0, "系统", "module/device/list.action", 1, 0, 0);//			oneList.add(front);//			oneList.add(system);//			List<MenuBo> twoList = new ArrayList<MenuBo>();//第二级菜单//			for (MenuInfo menu2 : menuList) {//				if(menu2.getParentId().equals(1l)){//					MenuBo twoMenu = new MenuBo(menu2.getId(), 1L, menu2.getName(), menu2.getHref(), 0, 0, 0);//					twoList.add(twoMenu);//					List<MenuBo> threeList = new ArrayList<MenuBo>();//第三级菜单//					for (MenuInfo menu3 : menuList) {//						if (null != menu3.getParentId() && menu2.getId().equals(menu3.getParentId())) {//找二级菜单下的子菜单//							MenuBo threeMenu = new MenuBo(menu3.getId(), menu3.getParentId(), menu3.getName(), menu3.getHref(), 0, 0, 0);//							threeList.add(threeMenu);//						}//					}//					twoMenu.setData(threeList);//				}//			}//			system.setData(twoList);//			return oneList;//		}//		return null;	}	}