package com.sws.service.imp;import java.util.ArrayList;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import com.gk.essh.util.tree.TreeNode;import com.gk.extend.hibernate.entity.QueryEntity;import com.sws.dao.FavoriteInfoDao;import com.sws.dao.UserInfoDao;import com.sws.model.FavoriteInfo;import com.sws.model.UserInfo;import com.sws.service.FavoriteInfoService;import com.sys.core.util.CollectionUtils;import com.sys.core.util.StringUtils;import com.sys.core.util.bean.Page;//@Service("roleInfoService")public class FavoriteInfoServiceImpl implements FavoriteInfoService {    	@Autowired    private FavoriteInfoDao favoriteInfo;	@Autowired    private UserInfoDao userInfoDao;	@Override	public FavoriteInfo getById(Long id) {		// TODO Auto-generated method stub		return favoriteInfo.get(id);	}	@Override	public void save(FavoriteInfo info) {		// TODO Auto-generated method stub		favoriteInfo.save(info);	}	@Override	public void update(FavoriteInfo info) {		// TODO Auto-generated method stub		favoriteInfo.update(info);	}	@Override	public void deleteAll(String ids) {		// TODO Auto-generated method stub		if (StringUtils.isNotBlank(ids)) {            List<Long> idList = CollectionUtils.toLongList(ids);            if (CollectionUtils.isNotEmpty(idList)) {                for (Long id : idList) {                	favoriteInfo.deleteById(id);                }            }        }	}	@Override	public Page page(QueryEntity queryEntity, int start, int limit,String sortname,String sortorder) {		// TODO Auto-generated method stub		List<String> paramList = new ArrayList<String>();		List<Object> valueList = new ArrayList<Object>();		if(StringUtils.isNotBlank(queryEntity.getStr1())){			paramList.add("no");			valueList.add(queryEntity.getStr1());		}		if(StringUtils.isNotBlank(queryEntity.getStr2())){			paramList.add("name");			valueList.add(queryEntity.getStr2());		}		 Page page = favoriteInfo.page(paramList.toArray(new String[paramList.size()]), valueList.toArray(),start, limit, sortname,				 sortorder.toLowerCase().equals("asc")?true:false);		return page;	}	private boolean isFavorite(String favoriteId, String favoriteIds){    	if(favoriteIds!=null){    		String[] array = favoriteIds.split(",");			for(String fId:array){				if(fId.equals(favoriteId)){					return true;				}			}    	}    	return false;    	    }	@Override	public TreeNode getFavoriteTree(Long userId) {		// TODO Auto-generated method stub		String favoriteIds=null;		TreeNode tree = new TreeNode();		List<FavoriteInfo> favoriteList = favoriteInfo.getAll();		UserInfo userInfo = userInfoDao.findUniqueBy("id", userId);		if(userInfo!=null&&userInfo.getFavoriteIds()!=null){			favoriteIds  = userInfo.getFavoriteIds();		}		tree.setId("0");		tree.setLabel("全部");		tree.setCls("home"); //图标		tree.setOpen(true);		for(FavoriteInfo favorite:favoriteList){			TreeNode treeNode = new TreeNode();			treeNode.setCls("room");			treeNode.setId(favorite.getId().toString());			treeNode.setLabel(favorite.getName());			treeNode.setParentId(tree.getId());			treeNode.setOpen(true);			if (isFavorite(favorite.getId().toString(), favoriteIds)) {				treeNode.setChecked(true);			} else {				treeNode.setChecked(false);			}			tree.addChildren(treeNode);		}		return tree;	}	}