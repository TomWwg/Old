package com.sws.action;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import com.alibaba.fastjson.JSONObject;import com.gk.essh.www.session.GkWebSession;import com.opensymphony.xwork2.ActionContext;import com.sws.bo.MenuBo;import com.sws.bo.UserBo;import com.sws.common.AjaxUtil;import com.sws.common.baseAction.BaseAction;import com.sws.common.entity.DeviceAlarm;import com.sws.common.entity.FullScreenData;import com.sws.common.entity.StaffEntity;import com.sws.common.entity.TypeRateEntity;import com.sws.common.entity.WashHandMoment;import com.sws.common.statics.SysStatics;import com.sws.common.until.DateUtils;import com.sws.common.until.MessageDigestUtils;import com.sws.common.until.StringUtil;import com.sws.dao.FavoriteInfoDao;import com.sws.dao.GroupTreeDao;import com.sws.dao.MenuInfoDao;import com.sws.model.DeviceInfo;import com.sws.model.FavoriteInfo;import com.sws.model.GroupTree;import com.sws.model.MenuInfo;import com.sws.model.ParameterInfo;import com.sws.model.StaffInfo;import com.sws.model.UserInfo;import com.sws.model.WashHandLog;import com.sws.service.FavoriteInfoService;import com.sws.service.LogInfoService;import com.sws.service.NoticeInfoService;import com.sws.service.RoleInfoService;import com.sws.service.WashHandLogService;import com.sys.core.util.JsonUtils;import com.sys.core.util.StringUtils;import com.sys.core.util.bean.Page;import com.sys.core.util.cm.ConfigManager;public class LoginAction extends BaseAction<LoginAction> {	@Autowired	private LogInfoService logService;	private static final long serialVersionUID = -4166358642288108799L;	private Logger log = LoggerFactory.getLogger(LoginAction.class);	private List<MenuBo> menus;	private UserBo userVo;	private String bodyUrl = "";	@Autowired    private FavoriteInfoDao favoriteInfoDao;	@Autowired	private FavoriteInfoService favoriteInfoService;	@Autowired	private RoleInfoService roleInfoService;	@Autowired	private WashHandLogService washHandLogService;	@Autowired	private NoticeInfoService noticeInfoService;	@Autowired    private GroupTreeDao groupTreeDao;		private Map<String,Integer> mapRight = new HashMap<String,Integer>();//正常	private Map<String,Integer> mapWrong = new HashMap<String,Integer>();//违规	private List<WashHandLog> washHandList = new ArrayList<WashHandLog>();//依从率统计用数据	private List<WashHandLog> washHandMomentList = new ArrayList<WashHandLog>();//洗手时机统计用数据	private FullScreenData fullScreenData = new FullScreenData();	private List<DeviceAlarm> deviceAlarmList = new ArrayList<DeviceAlarm>();	private List<TypeRateEntity> departmentRateList=new ArrayList<TypeRateEntity>();//部门类别依从率	private List<StaffEntity> staffTypeRateList=new ArrayList<StaffEntity>();//员工类别依从率	private List<Float> washHandMomentCompareList=new ArrayList<Float>();//洗手时机对比	/***********************************菜单添加******************************/	private List<MenuInfo> menuList;	private List<MenuInfo> superMenuList;	@Autowired    private MenuInfoDao menuInfoDao;	/***********************************首页显示内容******************************/		//进入首页	public String goHomeInfo(){		List<FavoriteInfo> favoriteList = new ArrayList<FavoriteInfo>();		UserInfo userInfo = userInfoService.getById(getUser().getId());		List<FavoriteInfo> allFavoriteList = favoriteInfoDao.getAll();		if(userInfo!=null&&userInfo.getFavoriteIds()!=null){			for(FavoriteInfo all:allFavoriteList){				String[] array = userInfo.getFavoriteIds().split(",");				for(String fId:array){					if(fId.equals(all.getId().toString())){						favoriteList.add(all);					}				}			}		}		ActionContext.getContext().put("favoriteList", favoriteList);		return "goHomeInfo";		}		/**	 * 计算全院依从率	 */	private TypeRateEntity getWholerate(List<StaffInfo> allStaffList){		String rfidStr;		TypeRateEntity wholeRateEntity=new TypeRateEntity();		List<String> allRfidList = new ArrayList<String>();		Map<String,Integer> allMapRight = new HashMap<String,Integer>();		Map<String,Integer> allMapWrong = new HashMap<String,Integer>();		StaffEntity allWork=new StaffEntity();		Integer ringtCount=null,wrongCount=null;		for(StaffInfo info:allStaffList){			allRfidList.add(getRfidByStaffId(info.getId()));		}		queryEntity.setRfidList(allRfidList);		List<WashHandLog> allWashHandList = washHandLogService.RateCompare(queryEntity);		for (WashHandLog wash : allWashHandList) {			if (wash.getRfid() != null) {				if (wash.getEventType().equals("0003")) { // 有效洗手数					if(wash.getRfidStatus().equals(3)||wash.getRfidStatus().equals(6)||wash.getRfidStatus().equals(9)||							wash.getRfidStatus().equals(10)||wash.getRfidStatus().equals(12)){						if (allMapRight.get(wash.getRfid()) == null) {							allMapRight.put(wash.getRfid(), 1);						} else {							allMapRight.put(wash.getRfid(),allMapRight.get(wash.getRfid()) + 1);// 只会更新value的值						}					}									} else {					if (allMapWrong.get(wash.getRfid()) == null) {						allMapWrong.put(wash.getRfid(), 1);					} else {						allMapWrong.put(wash.getRfid(),allMapWrong.get(wash.getRfid()) + 1);// 只会更新value的值					}				}			}		}		for(StaffInfo staff:allStaffList){			if(staff.getCategory()!=null){				rfidStr=getRfidByStaffId(staff.getId());				if(!rfidStr.equals("")){//全院					ringtCount=allMapRight.get(rfidStr);					wrongCount=allMapWrong.get(rfidStr);					if(ringtCount==null){						ringtCount=0;					}					if(wrongCount==null){						wrongCount=0;					}					allWork.setRightCount(allWork.getRightCount()+ringtCount);					allWork.setWrongCount(allWork.getWrongCount()+wrongCount);				}			}		}		wholeRateEntity.setRate(getPercent(allWork.getRightCount(), allWork.getRightCount()+allWork.getWrongCount()));		wholeRateEntity.setDepart("全院");		return wholeRateEntity;			}			/***********************************人员类别依从率,科室类别的依从率（近30天的数据）******************************/	private void mapComput(List<StaffInfo> staffList,List<StaffInfo> allStaffList){		String rfidStr;		String departStr="";		GroupTree departTree =null;		List<Long> departList = new ArrayList<Long>();		List<StaffInfo> departStaffLists =null;		Integer ringtCount=null,wrongCount=null;		//StaffEntity allWork=new StaffEntity(),docWork=new StaffEntity(),pNurseWork=new StaffEntity(),nurserWork=new StaffEntity(),supportWorker=new StaffEntity(),cleaner=new StaffEntity(); //依次是 全员 医生 护师 护士 护工 保洁		StaffEntity staffEntiy;		TypeRateEntity typeRateEntity;		mapProcessDay();         //map封装近30天的数据		List<String> staffTypes=getStaffCategory();		/*		 * 员工类别依从率		 */		for(String staffType:staffTypes){			staffEntiy=new StaffEntity();			staffEntiy.setName(parameterInfoDao.findByTypeAndKey(1, staffType).getValue());			for(StaffInfo staff:staffList){				if(StringUtil.isNotBlank(staff.getCategory())&&staff.getCategory().equals(staffType)){					rfidStr=getRfidByStaffId(staff.getId());					if(StringUtil.isNotBlank(rfidStr)){						ringtCount=mapRight.get(rfidStr);						wrongCount=mapWrong.get(rfidStr);						if(ringtCount==null){							ringtCount=0;						}						if(wrongCount==null){							wrongCount=0;						}						staffEntiy.setRightCount(staffEntiy.getRightCount()+ringtCount);						staffEntiy.setWrongCount(staffEntiy.getWrongCount()+wrongCount);					}				}			}			staffEntiy.setRate(getPercent(staffEntiy.getRightCount(), staffEntiy.getRightCount()+staffEntiy.getWrongCount()));			staffTypeRateList.add(staffEntiy);					}		/*for(StaffInfo staff:staffList){			if(staff.getCategory()!=null){//员工类别依从率				rfidStr=getRfidByStaffId(staff.getId());				if(!rfidStr.equals("")){//全院					ringtCount=mapRight.get(rfidStr);					wrongCount=mapWrong.get(rfidStr);					if(ringtCount==null){						ringtCount=0;					}					if(wrongCount==null){						wrongCount=0;					}					allWork.setRightCount(allWork.getRightCount()+ringtCount);					allWork.setWrongCount(allWork.getWrongCount()+wrongCount);				}				if(staff.getCategory().equals("1")){//医生					if(!rfidStr.equals("")){						ringtCount=mapRight.get(rfidStr);						wrongCount=mapWrong.get(rfidStr);						if(ringtCount==null){							ringtCount=0;						}						if(wrongCount==null){							wrongCount=0;						}						docWork.setRightCount(docWork.getRightCount()+ringtCount);						docWork.setWrongCount(docWork.getWrongCount()+wrongCount);					}				}else if(staff.getCategory().equals("2")){//护师					if(!rfidStr.equals("")){						ringtCount=mapRight.get(rfidStr);						wrongCount=mapWrong.get(rfidStr);						if(ringtCount==null){							ringtCount=0;						}						if(wrongCount==null){							wrongCount=0;						}						pNurseWork.setRightCount(pNurseWork.getRightCount()+ringtCount);						pNurseWork.setWrongCount(pNurseWork.getWrongCount()+wrongCount);					}				}else if(staff.getCategory().equals("3")){//护士					if(!rfidStr.equals("")){						ringtCount=mapRight.get(rfidStr);						wrongCount=mapWrong.get(rfidStr);						if(ringtCount==null){							ringtCount=0;						}						if(wrongCount==null){							wrongCount=0;						}						nurserWork.setRightCount(nurserWork.getRightCount()+ringtCount);						nurserWork.setWrongCount(nurserWork.getWrongCount()+wrongCount);					}				}else if(staff.getCategory().equals("4")){//护工					if(!rfidStr.equals("")){						ringtCount=mapRight.get(rfidStr);						wrongCount=mapWrong.get(rfidStr);						if(ringtCount==null){							ringtCount=0;						}						if(wrongCount==null){							wrongCount=0;						}						supportWorker.setRightCount(supportWorker.getRightCount()+ringtCount);						supportWorker.setWrongCount(supportWorker.getWrongCount()+wrongCount);					}				}else if(staff.getCategory().equals("5")){//保洁					if(!rfidStr.equals("")){						ringtCount=mapRight.get(rfidStr);						wrongCount=mapWrong.get(rfidStr);						if(ringtCount==null){							ringtCount=0;						}						if(wrongCount==null){							wrongCount=0;						}						cleaner.setRightCount(cleaner.getRightCount()+ringtCount);						cleaner.setWrongCount(cleaner.getWrongCount()+wrongCount);					}				}			}		}		staffTypeRateList.add(Float.valueOf(getPercent(allWork.getRightCount(), allWork.getRightCount()+allWork.getWrongCount())));		staffTypeRateList.add(Float.valueOf(getPercent(docWork.getRightCount(), docWork.getRightCount()+docWork.getWrongCount())));		staffTypeRateList.add(Float.valueOf(getPercent(pNurseWork.getRightCount(), pNurseWork.getRightCount()+pNurseWork.getWrongCount())));		staffTypeRateList.add(Float.valueOf(getPercent(nurserWork.getRightCount(), nurserWork.getRightCount()+nurserWork.getWrongCount())));		staffTypeRateList.add(Float.valueOf(getPercent(supportWorker.getRightCount(), supportWorker.getRightCount()+supportWorker.getWrongCount())));		staffTypeRateList.add(Float.valueOf(getPercent(cleaner.getRightCount(), cleaner.getRightCount()+cleaner.getWrongCount())));		 */				/*		 * 部门依从率		 */		List<GroupTree>	departLists = getPartList();		for(GroupTree depart:departLists){			departStr+=depart.getId()+",";		}		if(StringUtil.isNotBlank(departStr)){   			String[] departArray = departStr.split(",");			for(String depart:departArray){				departList.add(Long.valueOf(depart));			}		}		//加入全院的数据		//typeRateEntity = new TypeRateEntity();		//typeRateEntity.setRate(getPercent(allWork.getRightCount(), allWork.getRightCount()+allWork.getWrongCount()));		//typeRateEntity.setDepart("全院");		typeRateEntity=getWholerate(allStaffList);		departmentRateList.add(typeRateEntity);		for(Long departId:departList){			typeRateEntity = new TypeRateEntity();			departTree=groupTreeService.getById(departId);			if(departTree!=null){				typeRateEntity.setDepart(departTree.getName());			}			departStaffLists= staffInfoDao.findBy("groupTree.id", departId);			for(StaffInfo staff:departStaffLists){				rfidStr = getRfidByStaffId(staff.getId());				if(!rfidStr.equals("")){					ringtCount=mapRight.get(rfidStr);					wrongCount=mapWrong.get(rfidStr);					if(ringtCount==null){						ringtCount=0;					}					if(wrongCount==null){						wrongCount=0;					}					typeRateEntity.setRightCount(typeRateEntity.getRightCount()+ringtCount);					typeRateEntity.setWrongCount(typeRateEntity.getWrongCount()+wrongCount);				}			}			typeRateEntity.setRate(getPercent(typeRateEntity.getRightCount(), typeRateEntity.getRightCount()+typeRateEntity.getWrongCount()));			departmentRateList.add(typeRateEntity);		}	}		/**	 * 获取员工类别List	 */	private List<String> getStaffCategory(){		List<String> staffTypes=new ArrayList<String>(); 		if(getManageDepart().contains(getCommSession().getOrg())){//判断为管理部门			List<ParameterInfo> pInfos=parameterInfoDao.findByType(1);			for(ParameterInfo pi:pInfos){				staffTypes.add(pi.getKey());			}			return staffTypes;		}		List<StaffInfo> staffInfos=staffInfoDao.findByDepart(getManageDepart(),getCommSession().getOrg());		Set<String> staffTypeSets=new HashSet<String>();		for(StaffInfo staffInfo:staffInfos){			staffTypeSets.add(staffInfo.getCategory());		}		staffTypes=new ArrayList<String>(staffTypeSets);		return staffTypes;	}		/************************************************手卫生时机比较*******************************************************************/	private void compareWashHandMoment(int cpiacwp, int cpnw){		int washBeforeCloseNick=0,notWashBeforeCloseNick=0,washBeforeAsepticOperation=0,notWashBeforeAsepticOperation=0,				washAfterCloseNick=0,notWashAfterCloseNick=0,washAfterCloseNickEnvri=0,notWashafterCloseNickEnvri=0;		//洗手时机 和rfid映射 :接触患者后洗手		Map<String,Integer> washTimesAfterCloseNick = new HashMap<String,Integer>();		Map<String,Integer> notWashTimesAfterCloseNick = new HashMap<String,Integer>();		for (WashHandLog wash : washHandMomentList) {			if (wash.getRfidStatus() != null) {				if (wash.getRfidStatus().equals(9)|| wash.getRfidStatus().equals(10)) { // 接触病人前洗手					washBeforeCloseNick++;				} else if(wash.getRfidStatus().equals(11)) {//接触病人前未洗手					notWashBeforeCloseNick++;				}else if(wash.getRfidStatus().equals(1000)){//无菌操作前洗手,假设值,暂时用不上					washBeforeAsepticOperation++;				}else if(wash.getRfidStatus().equals(10000)){//无菌操作前未洗手,假设值,暂时用不上					notWashBeforeAsepticOperation++;				}else if(wash.getRfidStatus().equals(12)){//接触病人后洗手					washAfterCloseNick++;				}else if(wash.getRfidStatus() == 9 || wash.getRfidStatus() == 10){//接触患者后未洗手					notWashAfterCloseNick++;				}else if(wash.getRfidStatus().equals(6)){//接触病人环境后洗手					washAfterCloseNickEnvri++;				}else if(wash.getRfidStatus().equals(8)){//接触病人环境后未洗手					notWashafterCloseNickEnvri++;				}			}		}		int washACloseNickTotal = notWashAfterCloseNick + cpiacwp + cpnw;		double closingPatientsPersent = 0;		int numberOfClosingPatients = washHandLogService.findLogsOfClosingPatients(queryEntity).size();		if(washACloseNickTotal == 0){			closingPatientsPersent = 0;		} else {			closingPatientsPersent = new BigDecimal((float)washAfterCloseNick/washACloseNickTotal).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();		}		washHandMomentCompareList.add(Float.valueOf(getPercent(washBeforeCloseNick, washBeforeCloseNick+notWashBeforeCloseNick)));		if(washBeforeAsepticOperation == 0){			washHandMomentCompareList.add((float) 100);		} else {			washHandMomentCompareList.add(Float.valueOf(getPercent(washBeforeAsepticOperation, washBeforeAsepticOperation+notWashBeforeAsepticOperation)));		}		washHandMomentCompareList.add((float) closingPatientsPersent * 100);		washHandMomentCompareList.add(Float.valueOf(getPercent(washAfterCloseNickEnvri, washAfterCloseNickEnvri+notWashafterCloseNickEnvri)));	}		/**	 * 依从率的计算就是根据这几个参数得到的	 */	public void showScreenList(){		Integer effectWash=0,outRoom=0,beforeInBed=0,longOutBed=0;		fullScreenData = new FullScreenData();		for(WashHandLog log:washHandList){			if(log.getEventType()!=null){				if(log.getEventType().equals("0003")){					++effectWash;				}else if(log.getEventType().equals("0102")){					++ outRoom;				}else if(log.getEventType().equals("0103")){					++beforeInBed;				}else if(log.getEventType().equals("0110")){					++longOutBed;				}			}		}		fullScreenData.setEffectWash(effectWash);		//fullScreenData.setInRoom(inRoom);		fullScreenData.setOutRoom(outRoom);		fullScreenData.setBeforeInBed(beforeInBed);		fullScreenData.setLongOutBed(longOutBed);	}		private void mapProcessDay() {		for (WashHandLog wash : washHandList) {			if (wash.getRfid() != null) {				if (wash.getEventType().equals("0003")) { // 有效洗手数					if(wash.getRfidStatus().equals(3)||wash.getRfidStatus().equals(6)||wash.getRfidStatus().equals(9)||							wash.getRfidStatus().equals(10)||wash.getRfidStatus().equals(12)){						if (mapRight.get(wash.getRfid()) == null) {							mapRight.put(wash.getRfid(), 1);						} else {							mapRight.put(wash.getRfid(),mapRight.get(wash.getRfid()) + 1);// 只会更新value的值						}					}									} else {					if (mapWrong.get(wash.getRfid()) == null) {						mapWrong.put(wash.getRfid(), 1);					} else {						mapWrong.put(wash.getRfid(),mapWrong.get(wash.getRfid()) + 1);// 只会更新value的值					}				}			}		}	}		/**	 * 图表显示 :1 人员类别显示  2洗手比例显示	 * @return	 */	public void rateChart() {		Date date = new Date();		String start=null,end=null;		Date startDate = DateUtils.addDay(date,-30);		start=DateUtils.getStartDay(DateUtils.getYear(startDate),DateUtils.getMonth(startDate),DateUtils.getDay(startDate));		end=DateUtils.getEndDay(DateUtils.getYear(date),DateUtils.getMonth(date),DateUtils.getDay(date));		queryEntity.setStartTime(DateUtils.str2DateByYMDHMS(start));		queryEntity.setEndTime(DateUtils.str2DateByYMDHMS(end));		List<StaffInfo> allStaffList = new ArrayList<StaffInfo>();		List<String> rfidList = new ArrayList<String>();		List<StaffInfo> staffList = new ArrayList<StaffInfo>();		allStaffList = staffInfoDao.getAll();//用于计算全院依从率		//显示本科室的		//staffList = staffInfoDao.findByDepart(getManageDepart(),getCommSession().getOrg());		//显示医院的所有科室的依从率		staffList = staffInfoDao.getAll();				for(StaffInfo info:staffList){			rfidList.add(getRfidByStaffId(info.getId()));		}		queryEntity.setRfidList(rfidList);		//closingPatientNotWashHand接近患者未手卫生		int cpnw = washHandLogService.findLogsNotWashHangBeforeClosingPatient(queryEntity);		//closePatientAfterContactWithPatient:接触患者后的分母中，接近患者次数（清洁|有限清洁状态）		int cpiacwp = washHandLogService.findTimesOfClosePatientAfterContactWithPatient(queryEntity);				washHandList = washHandLogService.RateCompare(queryEntity);//查询近30天的数据		washHandMomentList=washHandLogService.EventCompare(queryEntity);//近30日手卫生时机对比		compareWashHandMoment(cpiacwp, cpnw);		mapComput(staffList,allStaffList); //人员类别,部门类别依从率,全院依从率		showScreenList();// 洗手比例		alarmChart();//报警数据比例		JSONObject obj = new JSONObject();		obj.put("staffTypeRateList", staffTypeRateList);		obj.put("departmentRateList", departmentRateList);		obj.put("washHandMomentCompareList", washHandMomentCompareList);		obj.put("fullScreenData", fullScreenData);		obj.put("deviceAlarmList", deviceAlarmList);		writeResponse(obj.toString());	}			/**	 * 列表显示前5条记录	 * @return	 */	@SuppressWarnings("unchecked")	public void screenListAjax() {		List<StaffInfo> staffList = new ArrayList<StaffInfo>();		List<String> rfidList = new ArrayList<String>();		String start=null,end=null;		Date date = new Date();		Date startDate = DateUtils.addDay(date,-30);		start=DateUtils.getStartDay(DateUtils.getYear(startDate),DateUtils.getMonth(startDate),DateUtils.getDay(startDate));		end=DateUtils.getEndDay(DateUtils.getYear(date),DateUtils.getMonth(date),DateUtils.getDay(date));		staffList=staffInfoDao.findByDepart(getManageDepart(),getCommSession().getOrg());		for(StaffInfo info:staffList){			rfidList.add(getRfidByStaffId(info.getId()));		}		queryEntity.setStartTime(DateUtils.str2DateByYMDHMS(start));		queryEntity.setEndTime(DateUtils.str2DateByYMDHMS(end));		queryEntity.setRfidList(rfidList);		page = washHandLogService.pageByEvent(queryEntity, 1, 6, "createTime", "desc");		if(page.getResult()!=null&&page.getResult().size()>0){			for(WashHandLog log:(List<WashHandLog>)page.getResult()){  //列表显示				if(log.getRfid()!=null){					log.setDocName(getDocByRfid(log.getRfid()));					log.setDepartName(getDepartNameByRfid(log.getRfid()));				}				if(log.getEventType()!=null){					log.setEventTypeName(SysStatics.eventTypeMap.get(log.getEventType()));				}				}			page = new Page(_page, rowNum, page.getResult(),  page.getTotal());		}else{			page = new Page(0, rowNum, null,  0);		}		AjaxUtil.ajaxWrite(JsonUtils.object2Json(page));	}			/**	 * 列表显示 前5条记录	 * @return	 */	public void noticeListAjax() {		page = noticeInfoService.page(queryEntity, 1, 5, "updateTime","desc");		page = new Page(_page, rowNum, page.getResult(),  page.getTotal());		AjaxUtil.ajaxWrite(JsonUtils.object2Json(page));	}	/**	 * 报警图表封装	 * @return	 * @author wwg修改  （显示设备数量大于0的全部设备类别）	 */	public void alarmChart() {		DeviceAlarm deviceAlarm = null;		//List <DeviceInfo> deviceList = deviceInfoDao.getAll();		List <DeviceInfo> deviceList = deviceInfoDao.findByDepart(getManageDepart(),getCommSession().getOrg());		 for (String key : SysStatics.alarmShowMap.keySet()) {			 deviceAlarm = new DeviceAlarm();			 deviceAlarm.setName(SysStatics.alarmShowMap.get(key));			 for(DeviceInfo info:deviceList){				 if(info.getType()!=null&&info.getType().equals(key)&&info.getDeviceStatus()!=null){					 if(info.getDeviceStatus().equals(0)){//状态0正常						 deviceAlarm.setNormal(deviceAlarm.getNormal()+1);					 }else{						 deviceAlarm.setError(deviceAlarm.getError()+1);					 }				 }			 }			 if((deviceAlarm.getNormal() + deviceAlarm.getError()) > 0){				 deviceAlarm.setRate(getPercent(deviceAlarm.getNormal(),deviceAlarm.getNormal()+deviceAlarm.getError()));				 deviceAlarm.setName(deviceAlarm.getName());//X轴坐标显示封装				 deviceAlarmList.add(deviceAlarm);			 }		}	}	/***********************************登陆处理******************************/	/**	 * 登陆	 * @return	 */	public String login() {		String MD5pass = MessageDigestUtils.getMD5(userVo.getPassword());		UserInfo user = userInfoService.login(userVo.getUserName(), MD5pass);		createSession(user);		getRequest().setAttribute("userName", user.getName());		//setToMemoryStore(SysStatics.USER_INFO, user);		log.info(DateUtils.currentDate2String() + " " + "登入" + userVo.getUserName());		return "login";	}	/**	 * 退出	 * @return	 */	public String logout() {		logService.addLog(SysStatics.OPERATION_LOG_USER_LOGOUT, getUser().getName() + "登出", getUser());		sessionProcessor.removeSession(getResponse(), getRequest());		return "logout";	}		/*	private List<MenuBo> makeMenu(Long userId){		return roleInfoService.getMuneList(userId);	}*/	public String index() {		String userId=sessionProcessor.getSession(getRequest()).getAttribute(GkWebSession.KEY_SESSION_USER);		List<MenuInfo> list =roleInfoService.getMuneList(Long.valueOf(userId));		//List<MenuInfo> list =menuInfoDao.getAll();		setMenuList(list);		return "indexHome";	}	public String indexHome() {		String userId=sessionProcessor.getSession(getRequest()).getAttribute(GkWebSession.KEY_SESSION_USER);		List<MenuInfo> list =roleInfoService.getMuneList(Long.valueOf(userId));		//List<MenuInfo> list =menuInfoDao.getAll();		setMenuList(list);		return "index";	}	/**	 * 创建session信息	 */	private void createSession(UserInfo userInfo) {		GkWebSession session = new GkWebSession();		String ip = userVo.getIp();		if (StringUtils.indexOf(ip, ":") > -1) {			ip = ip.substring(0, ip.indexOf(":"));		}		session.setAttribute(GkWebSession.KEY_SESSION_ID, getRequest().getSession().getId());	// "session"		session.setAttribute(GkWebSession.KEY_SESSION_USER, userInfo.getId().toString());	// 		session.setAttribute(GkWebSession.KEY_SESSION_NAME, userInfo.getName());	// "name"		//注意字符串中的不能出现‘，’这里转成*		session.setAttribute(GkWebSession.KEY_SESSION_ORG, userInfo.getDepartIds().replace(",", "*")); //所属科室 		session.setAttribute(GkWebSession.KEY_SESSION_IP, ip);		String expire = ConfigManager.getConfiguration("web-session", "session.expire");		sessionProcessor.setSession(getRequest(), getResponse(), session, Integer.parseInt(expire.trim()) * 60 * 1000);	}		private List<GroupTree> getPartList(){		String departIds = getCommSession().getOrg();		//System.out.println(departIds);		String[] array = departIds.split("\\*");		List<GroupTree>	departList = new ArrayList<GroupTree>();		//这是显示全院所有部门的依从率		departList = groupTreeService.getDepart();//首页显示全部科室数据		/*		 * 这是首页左上方的部门依从率只显示本部门和全院		if(getManageDepart()!=null&&getManageDepart().contains(departIds)){//管理部门			departList = groupTreeService.getDepart();		}else{			List<Long> ids = new ArrayList<Long>();			for(String dId:array){				ids.add(Long.valueOf(dId));			}			departList = groupTreeDao.findAllEntitysByIds(ids);		}		 */		return departList;	}	public List<MenuBo> getMenus() {		return menus;	}	public void setMenus(List<MenuBo> menus) {		this.menus = menus;	}	public String getBodyUrl() {		return bodyUrl;	}	public void setBodyUrl(String bodyUrl) {		this.bodyUrl = bodyUrl;	}	public UserBo getUserVo() {		return userVo;	}	public void setUserVo(UserBo userVo) {		this.userVo = userVo;	}	public List<MenuInfo> getMenuList() {		return menuList;	}	public void setMenuList(List<MenuInfo> menuList) {		this.menuList = menuList;	}	public List<MenuInfo> getSuperMenuList() {		superMenuList = new ArrayList<MenuInfo>();		if(menuList==null){			return superMenuList;		}		for(MenuInfo menuInfo:menuList){			if(menuInfo.getParentId().intValue()==0){				superMenuList.add(menuInfo);			}		}		return superMenuList;	}	public void setSuperMenuList(List<MenuInfo> superMenuList) {		this.superMenuList = superMenuList;	}	}