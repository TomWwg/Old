package com.sws.action;import java.util.ArrayList;import java.util.Date;import java.util.List;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Controller;import com.opensymphony.xwork2.ActionContext;import com.sws.common.AjaxUtil;import com.sws.common.baseAction.BaseAction;import com.sws.common.statics.SysStatics;import com.sws.common.until.DateUtils;import com.sws.common.until.MessageDigestUtils;import com.sws.common.until.StringUtil;import com.sws.dao.RoleInfoDao;import com.sws.dao.UserInfoDao;import com.sws.model.GroupTree;import com.sws.model.RoleInfo;import com.sws.model.UserInfo;import com.sws.service.FavoriteInfoService;import com.sys.core.util.JsonUtils;import com.sys.core.util.bean.Page;@Controller@Scope("prototype")public class UserAction extends BaseAction<UserInfo> {	private static final long serialVersionUID = -5943387633096348801L;	private Logger log = LoggerFactory.getLogger(UserAction.class);	private Long userId;	private int status;  //用户状态	private UserInfo userInfo;	private String userName;	private String oldPassword;	private String newPassword;	private String confirmPassword;		@Autowired    private UserInfoDao userInfoDao;	@Autowired    private RoleInfoDao roleInfoDao;	@Autowired    private FavoriteInfoService favoriteInfoService;	private String favoriteIds;	private Integer typeLevel;	private String passwordCheck;	/**	 * 个人中心	 */	public String personalCenter() {		userInfo = userInfoDao.findUniqueBy("name", userName);		if(userInfo.getGroupTree()!=null&&userInfo.getGroupTree().getName()!=null){			userInfo.setStrRev1(userInfo.getGroupTree().getName());		}		if(userInfo.getRoleInfo()!=null&&userInfo.getRoleInfo().getName()!=null){			userInfo.setStrRev2(userInfo.getRoleInfo().getName());		}		return "personalCenter";	}	/**	 * 进入修改密码	 */	public String changePasswordUI() {		userInfo = userInfoDao.findUniqueBy("name", userName);		return "changePasswordUI";	}	/**	 * 修改密码	 */	public void changePassword() {		if(userId!=null){			userInfo = userInfoService.getById(userId);			if (MessageDigestUtils.getMD5(oldPassword).equals(userInfo.getPassword())) {				userInfo.setPassword(MessageDigestUtils.getMD5(newPassword));				userInfoService.update(userInfo);			}else {				msg = "修改失败，原密码错误!";				success = false;			}		}else {			msg = "密码修改失败";			success = false;		}		writeResponse();	}	/**	 * 进入用户列表	 * @return	 */	public String pageUser() {		String roleStr="";		List<RoleInfo> userRoleList=roleInfoDao.getAll();		ActionContext.getContext().put("userRoleList", userRoleList);		for(RoleInfo roleInfo:userRoleList){			roleStr+=roleInfo.getId()+",";		}		queryEntity.setStr2(roleStr);		return "pageUser";	}	/**	 * 用户列表显示	 * @author wangyabei	 * @return	 */	@SuppressWarnings("unchecked")	public void pageUserAjax() {//		List<UserInfo> userList = new ArrayList<UserInfo>();//		UserInfo user ;				//page = userInfoService.page(getCommSession().getOrg(), queryEntity, _page, rowNum, sortname,sortorder);		page = userInfoService.pageByDLevel(getManageDepart(),getCommSession().getOrg(), queryEntity, _page, rowNum, sortname,sortorder);		if(page!=null){			for(UserInfo info:(List<UserInfo>)page.getResult()){				//user = new UserInfo();				if(info.getExpireTime()!=null){					info.setExpireStr(DateUtils.date2StrByYMD(info.getExpireTime()));				}				if(info.getGroupTree()!=null&&info.getGroupTree().getName()!=null){					info.setStrRev1(info.getGroupTree().getName());				}				if(info.getRoleInfo()!=null&&info.getRoleInfo().getName()!=null){					info.setStrRev2(info.getRoleInfo().getName());				}				if(info.getUserStatus()!=SysStatics.USER_STATUS_EXPRIE&&info.getExpireTime()!=null						&&!info.getName().equals("admin")){					if(DateUtils.compareByYMD(new Date(), info.getExpireTime())>0){						info.setUserStatus(SysStatics.USER_STATUS_EXPRIE);//过期						userInfoService.update(info);					}				}//				BeanUtils.copyProperties(info, user);//				userList.add(user);			}//			if(!getCommSession().getUserId().equals("1")){//				user = userInfoService.getById(Long.valueOf(getCommSession().getUserId()));//				userList.add(user);//			}			page = new Page(_page, rowNum, page.getResult(),  page.getTotal());		}else{			page = new Page(0, rowNum, null,  0);		}				AjaxUtil.ajaxWrite(JsonUtils.object2Json(page));	}	/**	 * 改用用户状态	 * @param statusString	 */	public void changeStatus() {		if (userId == null) {			msg = "没有改用户信息";			success = false;		}else {			UserInfo userInfo = userInfoService.getById(userId);			if(status==SysStatics.USER_STATUS_NORMAL){				userInfo.setUserStatus(SysStatics.USER_STATUS_STOP);			}else{				userInfo.setUserStatus(SysStatics.USER_STATUS_NORMAL);			}			userInfoService.update(userInfo);		}		writeResponse();	}	/**	 * 正常	 * @param userIds	 */	public void enabledUser() {		try {			if (StringUtil.isNullOrEmpty(ids)) {				throw new Exception("操作失败，请选择其他用户!");			}			userInfoService.changeStatusByIds(ids,SysStatics.USER_STATUS_NORMAL);		}		catch (Exception ex) {			msg = ex.getMessage();			success = false;		}		writeResponse();	}	/**	 * 禁用	 * @param userIds	 */	public void disabledUser() {		try {			if (StringUtil.isNullOrEmpty(ids)) {				throw new Exception("操作失败，请选择其他用户!");			}			userInfoService.changeStatusByIds(ids,SysStatics.USER_STATUS_STOP);		}		catch (Exception ex) {			msg = ex.getMessage();			success = false;		}		writeResponse();	}		/**	 * 进入添加或者修改界面	 * @return	 */	public String showDialog(){		//List<RoleInfo> roleList = roleInfoDao.getAll();		List<RoleInfo> roleList=roleInfoDao.getByOrg(getCommSession().getOrg());		ActionContext.getContext().put("roleList", roleList);		if(entity!=null){			if (null != entity.getId()) {				entity=userInfoService.getById(entity.getId());				if(entity.getGroupTree()!=null&&entity.getGroupTree().getId()!=null){					setGroupTreeId(entity.getGroupTree().getId().toString());									}			}		}		if(groupTreeId.equals("1")){			setTypeLevel(0); //医院			List<GroupTree>	departList = new ArrayList<GroupTree>();						UserInfo user = userInfoService.getById(Long.valueOf(getCommSession().getUserId()));			if(user.getGroupTree()!=null){				if(!user.getGroupTree().getId().equals(1L)){					GroupTree group = groupTreeService.getById( user.getGroupTree().getId());					departList.add(group);				}else{					departList = groupTreeService.getUserDepart();				}			}else{				departList = groupTreeService.getUserDepart();			}			ActionContext.getContext().put("departList", departList);		}		if(entity!=null){			return "showDialog";		}		return "addUserShowDialog";			}		/**	 * 添加提交	 * @return	 */	public String addUserSaveForm(){		long begin = System.currentTimeMillis();		GroupTree groupTree;		try {			if (StringUtils.isNotBlank(userName)) {				if(groupTreeId.equals("1")&&entity.getDepartIds().equals("")){					success = false;					msg = "请选择科室";				}else{					List<UserInfo> userInfos=userInfoService.getByUserName(userName);					if(userInfos.size()==0){						entity.setName(userName);						if(!groupTreeId.equals("1")){							groupTree = groupTreeService.getById(Long									.valueOf(groupTreeId));						}else{							groupTree=groupTreeService.getById(Long									.valueOf(entity.getDepartIds()));						}						entity.setGroupTree(groupTree);						//entity.getGroupTree().setId(Long.valueOf(groupTreeId));						entity.setPassword(MessageDigestUtils.getMD5("88888888"));						if(!groupTreeId.equals("1")){//不是医院							entity.setDepartIds(groupTreeId);						}						if (entity.getId() != null) {							entity.setUpdateTime(new Date());							userInfoService.update(entity);						} else {							entity.setUserStatus(SysStatics.USER_STATUS_NORMAL);							userInfoService.save(entity);						}					}else{						success = false;						msg = "用户名已经存在";					}				}			}						}catch(Exception ex){			log.error(ex.getMessage());			success = false;			msg = ex.getMessage();		}		log.info("save form use time:"+(System.currentTimeMillis()-begin)+"ms");		AjaxUtil.ajaxWrite(success,msg);		return SUCCESS;	}	/**	 * 修改提交	 * @return	 */	public String saveForm(){		long begin = System.currentTimeMillis();		GroupTree groupTree = groupTreeService.getById(Long				.valueOf(groupTreeId));		try {			if (entity != null) {				entity.setGroupTree(groupTree);				entity.getGroupTree().setId(Long.valueOf(groupTreeId));//				if(StringUtils.isNotBlank(entity.getPassword())&&passwordCheck.equals(entity.getPassword())){//					entity.setPassword(MessageDigestUtils.getMD5(entity.getPassword()));//				}				if(!groupTreeId.equals("1")){//不是医院					entity.setDepartIds(groupTreeId);				}				if (entity.getId() != null) {					entity.setUpdateTime(new Date());					userInfoService.update(entity);				} else {					entity.setUserStatus(SysStatics.USER_STATUS_NORMAL);					userInfoService.save(entity);				}			}						}catch(Exception ex){			log.error(ex.getMessage());			success = false;			msg = ex.getMessage();		}		log.info("save form use time:"+(System.currentTimeMillis()-begin)+"ms");		AjaxUtil.ajaxWrite(success,msg);		return SUCCESS;	}		/**	 * 删除	 * @return	 */	public String delData(){		long begin = System.currentTimeMillis();		try {			userInfoService.deleteAll(ids);		}catch(Exception ex){			log.error(ex.getMessage());			success = false;			msg = ex.getMessage();		}		log.info("delete data use time:"+(System.currentTimeMillis()-begin)+"ms");		AjaxUtil.ajaxWrite(success,msg);		return SUCCESS;	}	/**	 * 进入添加收藏界面	 * @return	 */	public String addFavoriteDialog(){		setUserId(Long.valueOf(getCommSession().getUserId()));		return "addFavoriteDialog";	}	/**	 * 生成菜收藏树	 * @return	 */	public String getFavoriteTree() {		if(userId!=null){			treeNode = favoriteInfoService.getFavoriteTree(userId);		}		return TREE;	}	/**	 * 添加收藏提交	 * @return	 */	public String addFavorite(){		long begin = System.currentTimeMillis();		try {			if(favoriteIds!=null){				if(userId!=null){					UserInfo info = userInfoService.getById(userId);					info.setFavoriteIds(favoriteIds);					userInfoService.update(info);  //更新菜单ids				}			}		}catch(Exception ex){			log.error(ex.getMessage());			success = false;			msg = ex.getMessage();		}		log.info("assign menu use time:"+(System.currentTimeMillis()-begin)+"ms");		AjaxUtil.ajaxWrite(success,msg);		return SUCCESS;	}	/**	 * 手动校时(平台对服务器校时)	 */	public String syncTime() {		String date,time;		date=DateUtils.date2StrByYMD(DateUtils.str2DateByYMDHMS(startTime));		time=DateUtils.date2StringByHMS(DateUtils.str2DateByYMDHMS(startTime));		try {			String osName = System.getProperty("os.name");			if (osName.matches("^(?i)Windows.*$")) {// Window 系统				Runtime.getRuntime().exec("cmd /c date " + date);	// Windows 系统				Process exec = Runtime.getRuntime().exec("cmd /c time " + time);				if (exec.waitFor() == 0) {					log.info("windows系统执行手动校时成功！时间：" + startTime );				}				else {					success = false;					log.info("windows系统执行手动校时失败！时间：" + startTime );				}			}			else {// Linux 系统				Runtime.getRuntime().exec(" sudo date -s " + date);	// linux 系统为tomcat用户分配了权限				Process exec = Runtime.getRuntime().exec(" sudo date -s " + time);				if (exec.waitFor() == 0) {					log.info("linux系统执行手动校时成功：" + startTime );				}				else {					success = false;					log.info("linux系统执行手动校时失败：" + startTime );				}			}		}		catch (Exception ex) {			log.error(ex.getMessage());			success = false;			msg = ex.getMessage();		}		AjaxUtil.ajaxWrite(success,msg);		return SUCCESS;	}			/**	 * 重置密码	 * @return	 */	public void resetPassword(){		String success="";		if(entity.getId() != null){			userInfo = userInfoService.getById(entity.getId());			if(userInfo!=null){				userInfo.setPassword(MessageDigestUtils.getMD5("88888888"));				userInfoService.update(userInfo);				success="true";			}		}		AjaxUtil.ajaxWrite(success);	}		/**	 * 校验用户名	 * @return	 */	public void checkUserName(){		String useable="-1";		if(StringUtils.isNotBlank(entity.getName())){			List<UserInfo> userInfos=userInfoService.getByUserName(entity.getName() );			if(userInfos.size()==0){				useable="0";			}		}		AjaxUtil.ajaxWrite(useable);	}		public String getFavoriteIds() {		return favoriteIds;	}	public void setFavoriteIds(String favoriteIds) {		this.favoriteIds = favoriteIds;	}	public Long getUserId() {		return userId;	}	public void setUserId(Long userId) {		this.userId = userId;	}	public int getStatus() {		return status;	}	public void setStatus(int status) {		this.status = status;	}	public String getUserName() {		return userName;	}	public void setUserName(String userName) {		this.userName = userName;	}	public UserInfo getUserInfo() {		return userInfo;	}	public void setUserInfo(UserInfo userInfo) {		this.userInfo = userInfo;	}	public String getOldPassword() {		return oldPassword;	}	public void setOldPassword(String oldPassword) {		this.oldPassword = oldPassword;	}	public String getNewPassword() {		return newPassword;	}	public void setNewPassword(String newPassword) {		this.newPassword = newPassword;	}	public String getConfirmPassword() {		return confirmPassword;	}	public void setConfirmPassword(String confirmPassword) {		this.confirmPassword = confirmPassword;	}	public Integer getTypeLevel() {		return typeLevel;	}	public void setTypeLevel(Integer typeLevel) {		this.typeLevel = typeLevel;	}	public String getPasswordCheck() {		return passwordCheck;	}	public void setPasswordCheck(String passwordCheck) {		this.passwordCheck = passwordCheck;	}		}