package com.sws.action;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.lang3.StringUtils;import org.apache.struts2.ServletActionContext;import org.springframework.beans.factory.annotation.Autowired;import com.alibaba.fastjson.JSONObject;import com.gk.essh.util.tree.TreeNode;import com.sws.common.AjaxUtil;import com.sws.common.baseAction.BaseAction;import com.sws.model.DeviceInfo;import com.sws.model.GroupTree;import com.sws.model.StaffInfo;import com.sws.service.DeviceInfoService;import com.sws.service.StaffInfoService;public class LocationAction extends BaseAction<LocationAction> {		private static final long serialVersionUID = -2868312613376378663L;	@Autowired	private StaffInfoService staffInfoService;	@Autowired	private DeviceInfoService deviceInfoService;	private String staffId;	private String nodeId;		/**	 * 根据科室选择医生	 * @return	 */	public String getStaff(){		List<StaffInfo> staffList = new ArrayList<StaffInfo>();		String departmentId = ServletActionContext.getRequest().getParameter("groupTreeId");		staffList = staffInfoDao.findByDepartAndType(getCommSession().getOrg(),Long.valueOf(departmentId),null);		String options = "<option value='-2'>---请选择---</option>";		for(StaffInfo info:staffList){			options+="<option value='"+info.getId().toString()+"'>"+info.getName()+"</option>";		}		AjaxUtil.ajaxWrite(true,options);		return SUCCESS;	}		public String goStaffLocation() {		return "goStaffLocation";	}		public String allStaffLocation(){		return "allStaffLocation";	}	public void getStaffList(){		GroupTree a = new GroupTree();		a.setId(Long.valueOf(nodeId));		List<StaffInfo> list = staffInfoDao.findBy("locationTree",a);		JSONObject obj = new JSONObject();		obj.put("staffList",list);		writeResponse(obj.toString());	}		public void getOrgTree() {		treeNode = groupTreeService.getTree(getManageDepart(),getCommSession().getOrg(),false,isTreeOpen);		StaffInfo staffInfo = staffInfoService.getById(Long.valueOf(staffId));		Map<String,Object> dataMap = new HashMap<String, Object>();		getMap(treeNode,dataMap);		JSONObject obj = new JSONObject();		obj.put("orgNode",dataMap);		if(staffInfo !=null && staffInfo.getLocationTree()!=null ){			if(staffInfo.getDeviceType()!=null&&staffInfo.getDeviceNo()!=null){				DeviceInfo deviceInfo = deviceInfoService.findByNoType(staffInfo.getDeviceNo(), staffInfo.getDeviceType());				if(deviceInfo!=null&&deviceInfo.getGroupTree()!=null){					obj.put("locationId",deviceInfo.getGroupTree().getId());					}			}					} else {			obj.put("locationId",0);		}		writeResponse(obj.toString());	}		public void getMap(TreeNode treeNode,Map<String,Object> dataMap){		if(staffId.equals("-1")){			GroupTree a = new GroupTree();			if(treeNode!=null&&StringUtils.isNotBlank(treeNode.getId())){				a.setId(Long.valueOf(treeNode.getId()));			}			List<StaffInfo> list = staffInfoDao.findBy("locationTree",a);			dataMap.put("name", treeNode.getLabel()+"("+list.size()+"人)");		}else{			dataMap.put("name", treeNode.getLabel());		}		dataMap.put("id", treeNode.getId());		List<TreeNode> treeNodeList = treeNode.getChildren();		if(treeNodeList!=null){			List<Object> list1 = new ArrayList<Object>();			for(TreeNode node : treeNodeList){				Map<String,Object> map = new HashMap<String, Object>();				getMap(node,map);				list1.add(map);			}			dataMap.put("children", list1);		}else{			List<Object> list1 = new ArrayList<Object>();			dataMap.put("children", list1);		}		}	public String getStaffId() {		return staffId;	}	public void setStaffId(String staffId) {		this.staffId = staffId;	}	public String getNodeId() {		return nodeId;	}	public void setNodeId(String nodeId) {		this.nodeId = nodeId;	}	}