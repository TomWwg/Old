 package com.sws.action;import java.util.Date;import java.util.List;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import com.opensymphony.xwork2.ActionContext;import com.sws.common.AjaxUtil;import com.sws.common.baseAction.BaseAction;import com.sws.common.statics.SysStatics;import com.sws.model.ParameterInfo;import com.sws.service.ParameterInfoService;import com.sys.core.util.JsonUtils;import com.sys.core.util.bean.Page;public class ParameterInfoAction extends BaseAction<ParameterInfo> {		private static final long serialVersionUID = -2868312613376378663L;	private Logger log = LoggerFactory.getLogger(ParameterInfoAction.class);	@Autowired	private ParameterInfoService parameterInfoService;	/**	 * 进入列表	 * 	 */	public String list() {		ActionContext.getContext().put("parameterMap", SysStatics.parameterMap);		return PAGE;	}		/**	 * 列表显示	 * @return	 */	@SuppressWarnings("unchecked")	public void listAjax() {		page = parameterInfoService.page(queryEntity, _page, rowNum, sortname,sortorder);		page = new Page(_page, rowNum, page.getResult(),  page.getTotal());		for(ParameterInfo info:(List<ParameterInfo>)page.getResult()){			if(info.getType()!=null){				info.setTypeName(SysStatics.parameterMap.get(info.getType().toString()));			}		}		AjaxUtil.ajaxWrite(JsonUtils.object2Json(page));	}		/**	 * 进入添加或者修改界面	 * @return	 */	public String showDialog(){		ActionContext.getContext().put("parameterMap", SysStatics.parameterMap);		if(entity!=null){			if (null != entity.getId()) { //修改界面				entity=parameterInfoService.getById(entity.getId());			}		}		return "showDialog";	}		/**	 * 添加或者修改提交	 * @return	 */	public String saveForm(){		long begin = System.currentTimeMillis();		ParameterInfo info =null,oldInfo = null;		try {			if (entity != null) {				if(entity.getId()!=null){					if(entity.getType()!=null&&entity.getKey()!=null){						oldInfo = parameterInfoService.getById(entity.getId());						if(!oldInfo.getKey().equals(entity.getKey())){//设备编号已改变							info = parameterInfoService.findByTypeAndKey(entity.getType(), entity.getKey());							if(info!=null){								throw new Exception("修改失败，设参数类型的key已存在！");								}						}					}					entity.setUpdateTime(new Date());					parameterInfoService.update(entity);				}else{					if(entity.getType()!=null&&entity.getKey()!=null){						info = parameterInfoService.findByTypeAndKey(entity.getType(), entity.getKey());						if(info!=null){							throw new Exception("添加失败，设参数类型的key已存在！");							}					}					parameterInfoService.save(entity);				}			} 		} catch (Exception ex) {			log.error(ex.getMessage());			success = false;			msg = ex.getMessage();		}		log.info("save form role time:" + (System.currentTimeMillis() - begin)				+ "ms");		AjaxUtil.ajaxWrite(success, msg);		return SUCCESS;	}		/**	 * 删除	 * @return	 */	public String delData(){		long begin = System.currentTimeMillis();		try {			parameterInfoService.deleteAll(ids);		}catch(Exception ex){			log.error(ex.getMessage());			success = false;			msg = ex.getMessage();		}		log.info("delete data use time:"+(System.currentTimeMillis()-begin)+"ms");		AjaxUtil.ajaxWrite(success,msg);		return SUCCESS;	}		}