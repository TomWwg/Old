package com.sws.action;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Set;import java.util.TreeSet;import org.springframework.beans.factory.annotation.Autowired;import com.alibaba.fastjson.JSONObject;import com.opensymphony.xwork2.ActionContext;import com.sws.common.AjaxUtil;import com.sws.common.entity.DepartRateEntity;import com.sws.common.entity.SanitizerData;import com.sws.common.until.DateUtils;import com.sws.common.until.ExcelAction;import com.sws.common.until.StringUtil;import com.sws.dao.GroupTreeDao;import com.sws.model.GroupTree;import com.sws.model.StaffInfo;import com.sws.model.UserInfo;import com.sws.model.WashHandLog;import com.sws.service.StaffInfoService;import com.sws.service.WashHandLogService;import com.sys.core.util.JsonUtils;import com.sys.core.util.bean.Page;public class SanitizerCountAction extends ExcelAction<WashHandLog>{		private static final long serialVersionUID = -2868312613376378663L;	@Autowired    private GroupTreeDao groupTreeDao;	@Autowired	private StaffInfoService staffInfoService;	@Autowired	private WashHandLogService washHandLogService;	private List<WashHandLog> washHandList = new ArrayList<WashHandLog>();	private Map<String,Integer> mapWash = new HashMap<String,Integer>();//正常----或者接触前	private List<SanitizerData> sanitizerNumList = new ArrayList<SanitizerData>();	private String timeType;	private List<DepartRateEntity> departSanitizerList = new ArrayList<DepartRateEntity>();		private void mapForSanitizerData() {		for (WashHandLog wash : washHandList) {			if (wash.getRfid() != null) {				if (wash.getEventType().equals("0003")) { // 有效洗手数					if (mapWash.get(wash.getRfid()) == null) {						mapWash.put(wash.getRfid(), 1);					} else {						mapWash.put(wash.getRfid(),								mapWash.get(wash.getRfid()) + 1);// 只会更新value的值					}				}			}		}	}	/*********************************** 洗手液使用量统计By员工  ******************************/	/**	 * 进入列表	 * 	 */	public String sanitizerByStaffList(){		String typeStr="";		Map<String, String> typeMap = getJobTypeMap();		ActionContext.getContext().put("jobTypeMap", typeMap);		for (Map.Entry<String,String> entry : typeMap.entrySet()) {			typeStr+=entry.getKey()+",";		}		queryEntity.setStr1(typeStr);		return "sanitizerByStaffList";	}	@SuppressWarnings("unchecked")	public void sanitizerByStaffListAjax() {		String rfid;		GroupTree departTree =null;		SanitizerData sanitizerData = null;		List<SanitizerData> list = new ArrayList<SanitizerData>();		List<StaffInfo>	staffList = new ArrayList<StaffInfo>();		List<String> rfidList = new ArrayList<String>();		List<Long> staffIds = new ArrayList<Long>();		Map<String, String> typeMap = getJobTypeMap();		if(queryEntity.getInt1()!=null&&!queryEntity.getInt1().equals(-1)){			rfidList.add(getRfidByStaffId(Long.valueOf(queryEntity.getInt1())));			staffIds.add(Long.valueOf(queryEntity.getInt1()));		}else{			List<String> typeList = new ArrayList<String>();			if(queryEntity.getStr1()!=null){				String[] staffTypeArray = queryEntity.getStr1().split(",");//人员类别名称				for(String staffType:staffTypeArray){					typeList.add(staffType);				}				if(StringUtil.isNotBlank(queryEntity.getTreeId())){					staffList= staffInfoDao.findByDepartAndType(getCommSession().getOrg(),Long.valueOf(queryEntity.getTreeId()),typeList);				}				for(StaffInfo info:staffList){					rfidList.add(getRfidByStaffId(info.getId()));					staffIds.add(info.getId());				}			}		}		queryEntity.setRfidList(rfidList);		if(rfidList.size()>0){			washHandList = washHandLogService.SanitizerNum(queryEntity);		}		mapForSanitizerData();//map数据封装		page = staffInfoService.page(staffIds, _page, rowNum, sortname,sortorder);//翻页		for(StaffInfo staff : (List<StaffInfo>) page.getResult()){			sanitizerData = new SanitizerData();			rfid=getRfidByStaffId(staff.getId());			if (staff.getName() != null) {				sanitizerData.setDocName(staff.getName());			}			if(staff.getCategory()!=null){				sanitizerData.setDocType(typeMap.get(staff.getCategory()));			}			if(staff.getGroupTree().getId()!=null){				departTree  = groupTreeService.getById(staff.getGroupTree().getId());				if(departTree!=null&&departTree.getName()!=null){					sanitizerData.setDepartName(departTree.getName());				}			}			sanitizerData.setRfid(rfid);			if(mapWash.get(rfid)!=null){				sanitizerData.setUseNum((mapWash.get(rfid)*3)+"ml");			}else{				sanitizerData.setUseNum("0 ml");			}			list.add(sanitizerData);		}		page = new Page(_page, rowNum, list, page.getTotal());		AjaxUtil.ajaxWrite(JsonUtils.object2Json(page));	}		/*********************************** 洗手液使用量统计By部门  ******************************/	public String sanitizerByDeptList(){		String departStr="";		List<GroupTree>	departList = new ArrayList<GroupTree>();		UserInfo user = userInfoService.getById(Long.valueOf(getCommSession().getUserId()));		if(user.getGroupTree()!=null){			if(!user.getGroupTree().getId().equals(1L)){				GroupTree group = groupTreeDao.findUniqueBy("id", user.getGroupTree().getId());				departList.add(group);			}else{				departList = groupTreeService.getDepart();			}		}else{			departList = groupTreeService.getDepart();		}		ActionContext.getContext().put("departList", departList);		for(GroupTree depart:departList){			departStr+=depart.getId()+",";		}		queryEntity.setStr1(departStr);		return "sanitizerByDeptList";	}	public void querySanitizerByTime(){		sanitizerByTime();		JSONObject obj = new JSONObject();		obj.put("departSanitizerList", departSanitizerList);		writeResponse(obj.toString());	}		public void sanitizerByTime(){		String rfid;		Map<Long,String> staffRfid = new HashMap<Long,String>();//staffId,rfid		List<StaffInfo> staffList = new ArrayList<StaffInfo>();		List<String> rfidList = new ArrayList<String>();		List<Long> departList = new ArrayList<Long>();		if(StringUtil.isNotBlank(depart)){			queryEntity.setStr1(depart);		}		if(StringUtil.isNotBlank(timeType)){			queryEntity.setInt1(Integer.valueOf(timeType));		}		if(StringUtil.isNotBlank(startTime)&&StringUtil.isNotBlank(endTime)){			queryEntity.setStartTime(DateUtils.str2DateByYM(startTime));			queryEntity.setEndTime(DateUtils.str2DateByYM(endTime));		}  //数据封装		if(StringUtil.isNotBlank(queryEntity.getStr1())){   //科室			String[] departArray = queryEntity.getStr1().split(",");//人员类别名称			for(String departId:departArray){				departList.add(Long.valueOf(departId));			}			staffList= staffInfoDao.findAllEntitysBy("groupTree.id", departList);			for(StaffInfo info:staffList){				rfid=getRfidByStaffId(info.getId());				rfidList.add(rfid);				staffRfid.put(info.getId(), rfid);			}		}		queryEntity.setRfidList(rfidList);			if(queryEntity.getInt1()!=null){			switch(queryEntity.getInt1()){ //时间统计类型			case 1:				queryEntity.setStartTime(DateUtils.getStartYear(DateUtils.getYear(queryEntity.getStartTime()))); 				queryEntity.setEndTime(DateUtils.getEndYear(DateUtils.getYear(queryEntity.getEndTime()))); 				if(rfidList.size()>0){					washHandList = washHandLogService.SanitizerNum(queryEntity);				}				mapProcessYear();				break;			case 2:				queryEntity.setStartTime(DateUtils.getStartMonth(DateUtils.getYear(queryEntity.getStartTime()),DateUtils.getMonth(queryEntity.getStartTime()))); 				queryEntity.setEndTime(DateUtils.getEndMonth(DateUtils.getYear(queryEntity.getEndTime()),DateUtils.getMonth(queryEntity.getEndTime())));				if(rfidList.size()>0){					washHandList = washHandLogService.SanitizerNum(queryEntity);				}				mapProcessMonth();				break;			}		}		mapCompute(staffRfid,staffList,departList);		}		//导出	public void exportByDeptAndTime()throws Exception {		sanitizerByTime();		int columns=1;		String fileName = "sanitizerByTime_" + DateUtils.date2StrByYMDHMS(new Date());		loadFileAndSheet("sanitizerByTime", 0);	//获取每一个分页的对象文档中默认有三个sheet，默认第一个下角标为0。		if (departSanitizerList != null && departSanitizerList.size() > 0) {			if(departSanitizerList.get(0).getNameList()!=null){				setRow(0); 				setCellValue(0, "时间"); 				columns=1;				for(String name:departSanitizerList.get(0).getNameList()){					setCellValue(columns++, name);				}			}//列头需要重写的话加上，一般末班的列头定义好就行了			for (int i = 0; i < departSanitizerList.size(); i++) {				columns=1;				setRow(i+1);				setCellValue(0, departSanitizerList.get(i).getTime());				for(String rate:departSanitizerList.get(i).getRateList()){					setCellValue(columns++, rate);				}			}					}		outputFile(fileName);	}			/*********************************时间统计******************************/	private void mapProcessYear() {		String mapStr;		for (WashHandLog wash : washHandList) {			if (wash.getRfid() != null&&wash.getCreateTime()!=null) {				mapStr=wash.getRfid()+","+String.valueOf(DateUtils.getYear(wash.getCreateTime()));				if (wash.getEventType().equals("0003")) { // 有效洗手数					if (mapWash.get(mapStr) == null) {						mapWash.put(mapStr, 1);					} else {						mapWash.put(mapStr,mapWash.get(mapStr) + 1);// 只会更新value的值					}				} 			}		}			}	private void mapProcessMonth() {		String mapStr;		for (WashHandLog wash : washHandList) {			if (wash.getRfid() != null&&wash.getCreateTime()!=null) {				mapStr = wash.getRfid()+","+DateUtils.date2StrByYM(wash.getCreateTime());				if (wash.getEventType().equals("0003")) { // 有效洗手数					if (mapWash.get(mapStr) == null) {						mapWash.put(mapStr, 1);					} else {						mapWash.put(mapStr,mapWash.get(mapStr) + 1);// 只会更新value的值					}				} 			}		}	}	private List<StaffInfo> departStaff(List<StaffInfo> staffList,Long departId){		List<StaffInfo> list = new ArrayList<StaffInfo>();		for(StaffInfo info:staffList){			if(info.getGroupTree()!=null&&info.getGroupTree().getId()!=null){				if(info.getGroupTree().getId().equals(departId)){					list.add(info);				}			}		}		return list;	}		private void mapCompute(Map<Long,String> staffRfid,List<StaffInfo> staffList,List<Long> departList){		String mapStr;		DepartRateEntity  departRate=null;		Set<String> setTime	= new TreeSet<String>();		Integer rightCount=0,i=0;		List<StaffInfo> departStaffList = new ArrayList<StaffInfo>();//一个部门下的人员列表		Date tempDate =null;		if(queryEntity.getInt1()!=null){ //年统计			if(queryEntity.getInt1().equals(1)){				for(i=DateUtils.getYear(queryEntity.getStartTime());i<=DateUtils.getYear(queryEntity.getEndTime());i++){					setTime.add(i.toString());				}							}else{ 				for(i=1,tempDate=queryEntity.getStartTime();queryEntity.getEndTime().compareTo(tempDate)>0;i++){					setTime.add(DateUtils.date2StrByYM(tempDate));					tempDate=DateUtils.addMouth(queryEntity.getStartTime(), i);									}			}		}		//setTime排序封装		for(String time:setTime){			departRate= new DepartRateEntity();			departRate.setTime(time);			for(Long departId:departList){				rightCount=0;				departRate.getNameList().add(groupTreeService.getById(departId).getName());//部门名称				departStaffList = departStaff(staffList,departId);				for(StaffInfo info:departStaffList){					mapStr=staffRfid.get(info.getId())+","+time;					if(mapWash.get(mapStr)!=null){						rightCount+=mapWash.get(mapStr);					}				}				departRate.getRightCountList().add(rightCount);				departRate.getRateList().add("洗手液用量:"+getDeptSanitizerNum(rightCount));			}			departSanitizerList.add(departRate);		}	}		public String getDeptSanitizerNum(Integer washNum){		String DeptSanitizerNum ="";		DeptSanitizerNum=washNum*3+"ml";		return DeptSanitizerNum;	}		public String getTimeType() {		return timeType;	}	public void setTimeType(String timeType) {		this.timeType = timeType;	}	public List<WashHandLog> getWashHandList() {		return washHandList;	}	public void setWashHandList(List<WashHandLog> washHandList) {		this.washHandList = washHandList;	}	public List<SanitizerData> getSanitizerNumList() {		return sanitizerNumList;	}	public void setSanitizerNumList(List<SanitizerData> sanitizerNumList) {		this.sanitizerNumList = sanitizerNumList;	}		}