package com.sws.action;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import com.opensymphony.xwork2.ActionContext;import com.sws.common.AjaxUtil;import com.sws.common.baseAction.BaseAction;import com.sws.dao.ScheduleDao;import com.sws.dao.StaffInfoDao;import com.sws.model.DateTemplate;import com.sws.model.ScheduleTemplate;import com.sws.model.StaffInfo;import com.sws.service.DateTemplateService;import com.sys.core.util.JsonUtils;import com.sys.core.util.bean.Page;public class DateTemplateAction extends BaseAction<DateTemplate>{	private Logger log = LoggerFactory.getLogger(AppNewsAction.class);	private static final long serialVersionUID = 2827956228898193501L;	@Autowired	private DateTemplateService dateTemplateService;	@Autowired    private ScheduleDao scheduleDao;	@Autowired    private StaffInfoDao staffInfoDao;		public String list(){		return PAGE;	}			@SuppressWarnings("unchecked")	public void listAjax(){		page = dateTemplateService.page(getCommSession().getOrg(),queryEntity, _page, rowNum, sortname,sortorder);		/*for(RoleInfo info:(List<RoleInfo>)page.getResult()){		}*/		page = new Page(_page, rowNum, page.getResult(),  page.getTotal());		for(DateTemplate dateTemlate : (List<DateTemplate>)page.getResult()){			String staffnames = "";			String[] staffIds = dateTemlate.getStaffIds().split(",");			if(staffIds.length>0){				for(int i = 0;i < staffIds.length;i++){					if(!staffIds[i].equals("")){						StaffInfo staffInfo = staffInfoDao.get(Long.valueOf(staffIds[i]));						if(staffInfo!=null){							if(i == staffIds.length-1){								staffnames += staffInfo.getName();							}else{								staffnames += staffInfo.getName() + ",";							}						}											}									}			}						dateTemlate.setStaffNames(staffnames);			if(dateTemlate.getScheduleTemplate()!=null){				dateTemlate.setScheduleTemplateName(dateTemlate.getScheduleTemplate().getName());			}		}		AjaxUtil.ajaxWrite(JsonUtils.object2Json(page));	}			public String showDialog(){		if(entity!=null){			if (null != entity.getId()) { //修改界面				entity=dateTemplateService.getById(entity.getId());			}					}		//获取当月最大天数		Calendar a = Calendar.getInstance();		a.set(Calendar.DATE, 1);		a.roll(Calendar.DATE, -1);		int maxDate = a.get(Calendar.DATE);		List<String> daysList = new ArrayList<String>();		for(int i = 1;i <= maxDate;i++){			daysList.add(i+"");		}		ActionContext.getContext().put("daysList", daysList);		List<ScheduleTemplate> scheduleTemplateList = scheduleDao.getAll();		List<StaffInfo> staffInfoList = staffInfoDao.getAll();		ActionContext.getContext().put("staffList", staffInfoList);		ActionContext.getContext().put("scheduleTemplateList", scheduleTemplateList);		return "showDialog";	}		/**	 * 添加或者修改提交	 * @return	 */	public String saveForm(){		long begin = System.currentTimeMillis();		try {			if (entity != null) {				if(entity.getId()!=null){					entity.setUpdateTime(new Date());					entity.setName(entity.getDay()+"号排班");					dateTemplateService.update(entity);				}else{					entity.setName(entity.getDay()+"号排班");					dateTemplateService.save(entity);				}			} 		} catch (Exception ex) {			log.error(ex.getMessage());			success = false;			msg = ex.getMessage();		}		log.info("save form role time:" + (System.currentTimeMillis() - begin)				+ "ms");		AjaxUtil.ajaxWrite(success, msg);		return SUCCESS;	}		/**	 * 删除	 * @return	 */	public String delData(){		long begin = System.currentTimeMillis();		try {			dateTemplateService.deleteAll(ids);		}catch(Exception ex){			log.error(ex.getMessage());			success = false;			msg = ex.getMessage();		}		log.info("delete data use time:"+(System.currentTimeMillis()-begin)+"ms");		AjaxUtil.ajaxWrite(success,msg);		return SUCCESS;	}}