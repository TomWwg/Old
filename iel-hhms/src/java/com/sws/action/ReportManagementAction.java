package com.sws.action;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Set;import java.util.TreeSet;import org.apache.struts2.ServletActionContext;import org.springframework.beans.factory.annotation.Autowired;import com.alibaba.fastjson.JSONObject;import com.opensymphony.xwork2.ActionContext;import com.sws.common.AjaxUtil;import com.sws.common.entity.DepartRateEntity;import com.sws.common.entity.FullScreenData;import com.sws.common.statics.SysStatics;import com.sws.common.until.DateUtils;import com.sws.common.until.ExcelAction;import com.sws.common.until.StringUtil;import com.sws.dao.GroupTreeDao;import com.sws.model.GroupTree;import com.sws.model.StaffInfo;import com.sws.model.WashHandLog;import com.sws.service.WashHandLogService;import com.sys.core.util.JsonUtils;import com.sys.core.util.bean.Page;public class ReportManagementAction extends ExcelAction<WashHandLog>{	private static final long serialVersionUID = -8464402516263678875L;	FullScreenData fullScreenData = new FullScreenData(); 	List<WashHandLog> washHandList = new ArrayList<WashHandLog>();	private List<DepartRateEntity> departRateList = new ArrayList<DepartRateEntity>();	Map<String,Integer> mapRight = new HashMap<String,Integer>();//正常----或者接触前	Map<String,Integer> mapWrong = new HashMap<String,Integer>();//违规----或者接触后	private String timeType;	@Autowired    private GroupTreeDao groupTreeDao;	@Autowired	private WashHandLogService washHandLogService;		/**	 * 依从率的计算就是根据这几个参数得到的	 */	public void showScreenList(){		Integer effectWash=0,inRoom=0,outRoom=0,beforeInBed=0,longOutBed=0;		fullScreenData = new FullScreenData();		for(WashHandLog log:washHandList){			if(log.getEventType()!=null){				if(log.getEventType().equals("0003")){					++effectWash;				}else if(log.getEventType().equals("0007")){					++inRoom;				}else if(log.getEventType().equals("0008")){					++outRoom;				}else if(log.getEventType().equals("0103")){					++beforeInBed;				}else if(log.getEventType().equals("0110")){					++longOutBed;				}			}		}		fullScreenData.setEffectWash(effectWash);		fullScreenData.setInRoom(inRoom);		fullScreenData.setOutRoom(outRoom);		fullScreenData.setBeforeInBed(beforeInBed);		fullScreenData.setLongOutBed(longOutBed);	}			/*********************************时间统计******************************/	private void mapProcessYear() {		String mapStr;		for (WashHandLog wash : washHandList) {			if (wash.getRfid() != null&&wash.getCreateTime()!=null) {				mapStr=wash.getRfid()+","+String.valueOf(DateUtils.getYear(wash.getCreateTime()));				if (wash.getEventType().equals("0003")) { // 有效洗手数					if (mapRight.get(mapStr) == null) {						mapRight.put(mapStr, 1);					} else {						mapRight.put(mapStr,mapRight.get(mapStr) + 1);// 只会更新value的值					}				} else {					if (mapWrong.get(mapStr) == null) {						mapWrong.put(mapStr, 1);					} else {						mapWrong.put(mapStr,mapWrong.get(mapStr) + 1);// 只会更新value的值					}				}			}		}			}	private void mapProcessMonth() {		String mapStr;		for (WashHandLog wash : washHandList) {			if (wash.getRfid() != null&&wash.getCreateTime()!=null) {				mapStr = wash.getRfid()+","+DateUtils.date2StrByYM(wash.getCreateTime());				if (wash.getEventType().equals("0003")) { // 有效洗手数					if (mapRight.get(mapStr) == null) {						mapRight.put(mapStr, 1);					} else {						mapRight.put(mapStr,mapRight.get(mapStr) + 1);// 只会更新value的值					}				} else {					if (mapWrong.get(mapStr) == null) {						mapWrong.put(mapStr, 1);					} else {						mapWrong.put(mapStr,mapWrong.get(mapStr) + 1);// 只会更新value的值					}				}			}		}	}	private List<StaffInfo> departStaff(List<StaffInfo> staffList,Long departId){		List<StaffInfo> list = new ArrayList<StaffInfo>();		for(StaffInfo info:staffList){			if(info.getGroupTree()!=null&&info.getGroupTree().getId()!=null){				if(info.getGroupTree().getId().equals(departId)){					list.add(info);				}			}		}		return list;	}	private void mapCompute(Map<Long,String> staffRfid,List<StaffInfo> staffList,List<Long> departList){		String mapStr;		DepartRateEntity  departRate=null;		Set<String> setTime	= new TreeSet<String>();		Integer rightCount=0,wrongCount=0,i=0;		List<StaffInfo> departStaffList = new ArrayList<StaffInfo>();//一个部门下的人员列表		Date tempDate =null;		if(queryEntity.getInt1()!=null){ //年统计			if(queryEntity.getInt1().equals(1)){				for(i=DateUtils.getYear(queryEntity.getStartTime());i<=DateUtils.getYear(queryEntity.getEndTime());i++){					setTime.add(i.toString());				}							}else{ 				for(i=1,tempDate=queryEntity.getStartTime();queryEntity.getEndTime().compareTo(tempDate)>0;i++){					setTime.add(DateUtils.date2StrByYM(tempDate));					tempDate=DateUtils.addMouth(queryEntity.getStartTime(), i);									}			}		}//setTime排序封装		for(String time:setTime){			departRate= new DepartRateEntity();			departRate.setTime(time);			for(Long departId:departList){				rightCount=0;				wrongCount=0;				departRate.getNameList().add(groupTreeService.getById(departId).getName());//部门名称				departStaffList = departStaff(staffList,departId);				for(StaffInfo info:departStaffList){					mapStr=staffRfid.get(info.getId())+","+time;					if(mapRight.get(mapStr)!=null){						rightCount+=mapRight.get(mapStr);					}					if(mapWrong.get(mapStr)!=null){						wrongCount+=mapWrong.get(mapStr);					}				}				departRate.getRightCountList().add(rightCount);				departRate.getWrongCountList().add(wrongCount);				departRate.getRateList().add("正常:"+rightCount+"次,依从率:"+getPercent(rightCount,rightCount+wrongCount)+"%");			}			departRateList.add(departRate);		}	}	private List<GroupTree> getPartList(){		String departIds = getCommSession().getOrg();		String[] array = departIds.split("\\*");		List<GroupTree>	departList = new ArrayList<GroupTree>();		if(departIds.equals("1")){//最高级别的管理员			departList = groupTreeService.getDepart();		}else{			List<Long> ids = new ArrayList<Long>();			for(String dId:array){				ids.add(Long.valueOf(dId));			}			departList = groupTreeDao.findAllEntitysByIds(ids);		}		return departList;	}	/**	 * 进入时间统计列表	 * @return	 */	public String goRateByTime(){		String departStr="";		List<GroupTree>	departList = getPartList();		ActionContext.getContext().put("departList", departList);		for(GroupTree depart:departList){			departStr+=depart.getId()+",";		}		queryEntity.setStr1(departStr);		return "goRateByTime";	}	public void proRateByTime(){		String rfid;		Map<Long,String> staffRfid = new HashMap<Long,String>();//staffId,rfid		List<StaffInfo> staffList = new ArrayList<StaffInfo>();		List<String> rfidList = new ArrayList<String>();		List<Long> departList = new ArrayList<Long>();		if(StringUtil.isNotBlank(depart)){			queryEntity.setStr1(depart);		}		if(StringUtil.isNotBlank(timeType)){			queryEntity.setInt1(Integer.valueOf(timeType));		}		if(StringUtil.isNotBlank(startTime)&&StringUtil.isNotBlank(endTime)){			queryEntity.setStartTime(DateUtils.str2DateByYM(startTime));			queryEntity.setEndTime(DateUtils.str2DateByYM(endTime));		}  //数据封装		if(StringUtil.isNotBlank(queryEntity.getStr1())){   //科室			String[] departArray = queryEntity.getStr1().split(",");//人员类别名称			for(String departId:departArray){				departList.add(Long.valueOf(departId));			}			staffList= staffInfoDao.findAllEntitysBy("groupTree.id", departList);			for(StaffInfo info:staffList){				rfid=getRfidByStaffId(info.getId());				rfidList.add(rfid);				staffRfid.put(info.getId(), rfid);			}		}		queryEntity.setRfidList(rfidList);			if(queryEntity.getInt1()!=null){			switch(queryEntity.getInt1()){ //时间统计类型			case 1:				queryEntity.setStartTime(DateUtils.getStartYear(DateUtils.getYear(queryEntity.getStartTime()))); 				queryEntity.setEndTime(DateUtils.getEndYear(DateUtils.getYear(queryEntity.getEndTime()))); 				if(rfidList.size()>0){					washHandList = washHandLogService.RateCompare(queryEntity);				}				mapProcessYear();				break;			case 2:				queryEntity.setStartTime(DateUtils.getStartMonth(DateUtils.getYear(queryEntity.getStartTime()),DateUtils.getMonth(queryEntity.getStartTime()))); 				queryEntity.setEndTime(DateUtils.getEndMonth(DateUtils.getYear(queryEntity.getEndTime()),DateUtils.getMonth(queryEntity.getEndTime())));				if(rfidList.size()>0){					washHandList = washHandLogService.RateCompare(queryEntity);				}				mapProcessMonth();				break;			}		}		mapCompute(staffRfid,staffList,departList);		}	public void queryRateByTime(){		proRateByTime();		JSONObject obj = new JSONObject();		obj.put("departRateList", departRateList);		writeResponse(obj.toString());	}	//导出	public void exportRateByTime()throws Exception {		proRateByTime();		int columns=1;		String fileName = "rateByTime_" + DateUtils.date2StrByYMDHMS(new Date());		loadFileAndSheet("rateByTime", 0);	//获取每一个分页的对象文档中默认有三个sheet，默认第一个下角标为0。		if (departRateList != null && departRateList.size() > 0) {			if(departRateList.get(0).getNameList()!=null){				setRow(0); 				setCellValue(0, "时间"); 				columns=1;				for(String name:departRateList.get(0).getNameList()){					setCellValue(columns++, name);				}			}//列头需要重写的话加上，一般末班的列头定义好就行了			for (int i = 0; i < departRateList.size(); i++) {				columns=1;				setRow(i+1);				setCellValue(0, departRateList.get(i).getTime());				for(String rate:departRateList.get(i).getRateList()){					setCellValue(columns++, rate);				}			}					}		outputFile(fileName);	}	/*********************************洗手统计图表******************************/	/**	 * 洗手统计图表	 * @return	 */	public String goWashChart(){		List<StaffInfo>	staffList = new ArrayList<StaffInfo>();		ActionContext.getContext().put("staffList", staffList);			return "goWashChart";	}	// 图标显示	public void washChart() {		List<StaffInfo> staffList = new ArrayList<StaffInfo>();		List<String> rfidList = new ArrayList<String>();		if(StringUtil.isNotBlank(startTime)&&StringUtil.isNotBlank(endTime)){			queryEntity.setStartTime(DateUtils.str2DateByYMDHMS(startTime));			queryEntity.setEndTime(DateUtils.str2DateByYMDHMS(endTime));		}		if(StringUtil.isNotBlank(staffId)&&!staffId.equals("-1")){			rfidList.add(getRfidByStaffId(Long.valueOf(staffId)));		}else{			if(StringUtil.isNotBlank(treeId)){				staffList= staffInfoDao.findByDepartAndType(getCommSession().getOrg(),Long.valueOf(treeId),null);			}			for(StaffInfo info:staffList){				rfidList.add(getRfidByStaffId(info.getId()));			}		}		queryEntity.setRfidList(rfidList);		if (rfidList.size() > 0) {			washHandList = washHandLogService.RateCompare(queryEntity); // 最近一个月的事件查询(图标显示）		}		showScreenList();// 图标显示封装		JSONObject obj = new JSONObject();		obj.put("fullScreenData", fullScreenData);		writeResponse(obj.toString());	}		/*********************************电视屏幕报表******************************/	/**	 * 进入大屏测试列表	 * @return	 */	public String goShowScreen(){		return "goShowScreen";	}	/**	 * 列表显示 前十条记录	 * @return	 */	@SuppressWarnings("unchecked")	public void screenListAjax() {		String start=null,end=null;		Date date = new Date();		Date startDate = DateUtils.addDay(date,-30);		List<StaffInfo> staffList = new ArrayList<StaffInfo>();		List<String> rfidList = new ArrayList<String>();		start=DateUtils.getStartDay(DateUtils.getYear(startDate),DateUtils.getMonth(startDate),DateUtils.getDay(startDate));		end=DateUtils.getEndDay(DateUtils.getYear(date),DateUtils.getMonth(date),DateUtils.getDay(date));		queryEntity.setStartTime(DateUtils.str2DateByYMDHMS(start));		queryEntity.setEndTime(DateUtils.str2DateByYMDHMS(end));		if(StringUtil.isNotBlank(queryEntity.getTreeId())){			staffList= staffInfoDao.findByDepartAndType(getCommSession().getOrg(),Long.valueOf(queryEntity.getTreeId()),null);		}		for(StaffInfo info:staffList){			rfidList.add(getRfidByStaffId(info.getId()));		}		queryEntity.setRfidList(rfidList);		if(rfidList.size()>0){			page = washHandLogService.pageByEvent(queryEntity, 1, 10, "createTime", "desc");			if(page.getResult()!=null&&page.getResult().size()>0){				for(WashHandLog log:(List<WashHandLog>)page.getResult()){  //列表显示					if(log.getRfid()!=null){						log.setDocName(getDocByRfid(log.getRfid()));						log.setDepartName(getDepartNameByRfid(log.getRfid()));					}					if(log.getEventType()!=null){						log.setEventTypeName(SysStatics.eventTypeMap.get(log.getEventType()));					}					}				page = new Page(_page, rowNum, page.getResult(),  page.getTotal());			}else{				page = new Page(0, rowNum, null,  0);			}		}else{			page = new Page(0, rowNum, null,  0);		}		AjaxUtil.ajaxWrite(JsonUtils.object2Json(page));	}	//图标显示	public void screenChart(){		List<StaffInfo> staffList = new ArrayList<StaffInfo>();		List<String> rfidList = new ArrayList<String>();		String start=null,end=null;		Date date = new Date();		Date startDate = DateUtils.addDay(date,-30);		start=DateUtils.getStartDay(DateUtils.getYear(startDate),DateUtils.getMonth(startDate),DateUtils.getDay(startDate));		end=DateUtils.getEndDay(DateUtils.getYear(date),DateUtils.getMonth(date),DateUtils.getDay(date));		queryEntity.setStartTime(DateUtils.str2DateByYMDHMS(start));		queryEntity.setEndTime(DateUtils.str2DateByYMDHMS(end));		String treeId = ServletActionContext.getRequest().getParameter("treeId");		if(StringUtil.isNotBlank(treeId)){			staffList= staffInfoDao.findByDepartAndType(getCommSession().getOrg(),Long.valueOf(treeId),null);		}		for(StaffInfo info:staffList){			rfidList.add(getRfidByStaffId(info.getId()));		}		queryEntity.setRfidList(rfidList);		if(rfidList.size()>0){			washHandList = washHandLogService.RateCompare(queryEntity);  //最近一个月的事件查询(图标显示）		}			showScreenList();//图标显示封装		JSONObject obj = new JSONObject();		obj.put("fullScreenData", fullScreenData);		writeResponse(obj.toString());	}		public String getTimeType() {		return timeType;	}	public void setTimeType(String timeType) {		this.timeType = timeType;	}}