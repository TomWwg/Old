package com.sws.task;import java.text.NumberFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import org.springframework.beans.factory.annotation.Autowired;import com.gk.essh.core.task.AbstractTaskEntity;import com.gk.extend.hibernate.entity.QueryEntity;import com.sws.common.until.DateUtils;import com.sws.model.PreRateStatistics;import com.sws.model.WashHandLog;import com.sws.service.PreRateStatisticsService;import com.sws.service.WashHandLogService;/** * @ClassName PreRateStatisticsTask * @Description TODO 一般凌晨1点触发一次，统计前一天的 依次率（日统计） * @author lenovo * @Date 2017年1月23日 下午1:39:01 * @version 1.0.0 *///public class PreRateStatisticsTask extends AbstractTaskEntity{public class PreRateStatisticsTask {	protected QueryEntity queryEntity = new QueryEntity();	private List<WashHandLog> washHandList = new ArrayList<WashHandLog>();	Set<String> rfidSet = new HashSet<String>();	private Map<String,Integer> mapEffectWash = new HashMap<String,Integer>();//正常--	private Map<String,Integer> mapInRoom = new HashMap<String,Integer>();//违规--	private Map<String,Integer> mapOutRoom = new HashMap<String,Integer>();//违规----	private Map<String,Integer> mapBeforeInBed = new HashMap<String,Integer>();//违规--	private Map<String,Integer> mapLongOutBed = new HashMap<String,Integer>();//违规--	@Autowired	private WashHandLogService washHandLogService;	@Autowired	private PreRateStatisticsService preRateStatisticsService;		//@Override    public void run() {        Date preDate = DateUtils.addDay(new Date(), -1); //统计前一天的数据        insertDataByDay(preDate);        /*for(int i=1;i<100;i++){            insertDataByDay(DateUtils.addDay(DateUtils.str2DateByYMD("2015-01-01"), i));        }*/    }	private void insertDataByDay(Date preDate){	    String rfid="",timeStr,rateStr;        Set<String> setRfid = new HashSet<String>();//过滤重复        PreRateStatistics preRateStatistics=null;        List<PreRateStatistics> tempList = new ArrayList<PreRateStatistics>();        List<PreRateStatistics> preRateList = new ArrayList<PreRateStatistics>();        queryEntity.setStartTime(DateUtils.getStartDate(preDate));         queryEntity.setEndTime(DateUtils.getEndDate(preDate));         washHandList = washHandLogService.RateCompare(queryEntity);        timeStr=DateUtils.date2StrByYMD(preDate);        String[] propertyName = {"recordType","timeStr"};        Object[] value = {0,timeStr};//0是日        tempList = preRateStatisticsService.findBy(propertyName, value);        for(PreRateStatistics temp:tempList){            setRfid.add(temp.getRfid());        }        mapProcess();        for( Iterator<String> it = rfidSet.iterator(); it.hasNext();){            rfid = it.next();            preRateStatistics = new PreRateStatistics();            if(setRfid.size()>0&&setRfid.contains(rfid)){//如果存在则不重复插入                continue;            }            preRateStatistics.setRfid(rfid);            preRateStatistics.setRecordType(0);//日统计            preRateStatistics.setTimeStr(timeStr);            if(mapEffectWash.get(rfid)!=null){                preRateStatistics.setEffectWash(mapEffectWash.get(rfid));            }            if(mapInRoom.get(rfid)!=null){                preRateStatistics.setInRoom(mapInRoom.get(rfid));            }            if(mapOutRoom.get(rfid)!=null){                preRateStatistics.setOutRoom(mapOutRoom.get(rfid));            }            if(mapBeforeInBed.get(rfid)!=null){                preRateStatistics.setBeforeInBed(mapBeforeInBed.get(rfid));            }            if(mapLongOutBed.get(rfid)!=null){                preRateStatistics.setLongOutBed(mapLongOutBed.get(rfid));            }            rateStr=getPercent(preRateStatistics.getEffectWash(),preRateStatistics.getEffectWash()+preRateStatistics.getInRoom()+                    +preRateStatistics.getOutRoom()+preRateStatistics.getBeforeInBed()+preRateStatistics.getLongOutBed());            preRateStatistics.setRate(rateStr);            preRateList.add(preRateStatistics);        }        preRateStatisticsService.saveAll(preRateList);	}	private void mapProcess() {		String eventType="",rfid ="";		for (WashHandLog wash : washHandList) {			if (wash.getRfid() != null) {				rfid = wash.getRfid();				eventType=wash.getEventType();				rfidSet.add(rfid);				if (eventType.equals("0003")) { // 有效洗手数					if (mapEffectWash.get(rfid) == null) {						mapEffectWash.put(rfid, 1);					} else {						mapEffectWash.put(rfid,mapEffectWash.get(rfid) + 1);// 只会更新value的值					}				} else if(eventType.equals("0007")){ //					if (mapInRoom.get(rfid) == null) {						mapInRoom.put(rfid, 1);					} else {						mapInRoom.put(rfid,mapInRoom.get(rfid) + 1);// 只会更新value的值					}				}else if(eventType.equals("0008")){ //					if (mapOutRoom.get(rfid) == null) {						mapOutRoom.put(rfid, 1);					} else {						mapOutRoom.put(rfid,mapOutRoom.get(rfid) + 1);// 只会更新value的值					}				}else if(eventType.equals("0103")){ //					if (mapBeforeInBed.get(rfid) == null) {						mapBeforeInBed.put(rfid, 1);					} else {						mapBeforeInBed.put(rfid,mapBeforeInBed.get(rfid) + 1);// 只会更新value的值					}				}else if(eventType.equals("0110")){ //					if (mapLongOutBed.get(rfid) == null) {						mapLongOutBed.put(rfid, 1);					} else {						mapLongOutBed.put(rfid,mapLongOutBed.get(rfid) + 1);// 只会更新value的值					}				}			}		}	}	// 计算百分比	protected String getPercent(Integer tem1, Integer tem2) {		String result = "0.0";		if (!tem2.equals(0)) {			NumberFormat numberFormat = NumberFormat.getInstance();			numberFormat.setMaximumFractionDigits(1);			result = numberFormat.format((float) tem1 / (float) tem2 * 100);		}		return result;	}}