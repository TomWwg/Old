package com.sws.task;import java.text.NumberFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import org.springframework.beans.factory.annotation.Autowired;import com.gk.essh.core.task.AbstractTaskEntity;import com.gk.extend.hibernate.entity.QueryEntity;import com.sws.common.until.DateUtils;import com.sws.model.PreRateStatistics;import com.sws.service.PreRateStatisticsService;/** * @ClassName PreRateStatisticsYmTask * @Description TODO 一般每月1月1日触发一次，统计上一个月的 依次率（月统计） * @author lenovo * @Date 2017年1月23日 下午1:43:32 * @version 1.0.0 *///public class PreRateStatisticsYmTask extends AbstractTaskEntity{public class PreRateStatisticsYmTask {	protected QueryEntity queryEntity = new QueryEntity();	Set<String> rfidSet = new HashSet<String>();	private Map<String,Integer> mapEffectWash = new HashMap<String,Integer>();//正常--	private Map<String,Integer> mapInRoom = new HashMap<String,Integer>();//违规--	private Map<String,Integer> mapOutRoom = new HashMap<String,Integer>();//违规----	private Map<String,Integer> mapBeforeInBed = new HashMap<String,Integer>();//违规--	private Map<String,Integer> mapLongOutBed = new HashMap<String,Integer>();//违规--	List<PreRateStatistics> preRateDayList = new ArrayList<PreRateStatistics>();	@Autowired	private PreRateStatisticsService preRateStatisticsService;		//@Override	public void run() {		//System.out.println("任务执行");	    Date preMonth = DateUtils.addMouth(new Date(), -1); //统计前一个月的数据	    insertDataByYM(preMonth);	   /* for(int i=1;i<24;i++){	        insertDataByYM(DateUtils.addDay(DateUtils.str2DateByYM("2015-01"), i));        }*/	}	private void insertDataByYM(Date preMonth){	    String rfid="",timeStr,rateStr;        Set<String> setRfid = new HashSet<String>();//过滤重复        PreRateStatistics preRateStatistics= null;        List<PreRateStatistics> tempList = new ArrayList<PreRateStatistics>();        List<PreRateStatistics> preRateList = new ArrayList<PreRateStatistics>();        queryEntity.setInt1(0);        queryEntity.setStr2(DateUtils.date2StrByYMD(DateUtils.getStartMonth(preMonth)));        queryEntity.setStr3(DateUtils.date2StrByYMD(DateUtils.getEndMonth(preMonth)));        preRateDayList = preRateStatisticsService.queryList(queryEntity);        timeStr=DateUtils.date2StrByYM(preMonth);        String[] propertyName = {"recordType","timeStr"};        Object[] value = {1,timeStr};        tempList = preRateStatisticsService.findBy(propertyName, value);        for(PreRateStatistics temp:tempList){            setRfid.add(temp.getRfid());        }        mapProcess();        for( Iterator<String> it = rfidSet.iterator(); it.hasNext();){            rfid = it.next();            preRateStatistics = new PreRateStatistics();            if(setRfid.size()>0&&setRfid.contains(rfid)){//如果存在则不重复插入                continue;            }            preRateStatistics.setRfid(rfid);            preRateStatistics.setRecordType(1);            preRateStatistics.setTimeStr(timeStr);            if(mapEffectWash.get(rfid)!=null){                preRateStatistics.setEffectWash(mapEffectWash.get(rfid));            }            if(mapInRoom.get(rfid)!=null){                preRateStatistics.setInRoom(mapInRoom.get(rfid));            }            if(mapOutRoom.get(rfid)!=null){                preRateStatistics.setOutRoom(mapOutRoom.get(rfid));            }            if(mapBeforeInBed.get(rfid)!=null){                preRateStatistics.setBeforeInBed(mapBeforeInBed.get(rfid));            }            if(mapLongOutBed.get(rfid)!=null){                preRateStatistics.setLongOutBed(mapLongOutBed.get(rfid));            }            rateStr=getPercent(preRateStatistics.getEffectWash(),preRateStatistics.getEffectWash()+preRateStatistics.getInRoom()+                    +preRateStatistics.getOutRoom()+preRateStatistics.getBeforeInBed()+preRateStatistics.getLongOutBed());            preRateStatistics.setRate(rateStr);            preRateList.add(preRateStatistics);        }        preRateStatisticsService.saveAll(preRateList);	}	private void mapProcess() {		String rfid="";		for(PreRateStatistics rateDay:preRateDayList){	    	rfid = rateDay.getRfid();	    	rfidSet.add(rfid);	    	if (mapEffectWash.get(rfid) == null) {				mapEffectWash.put(rfid, rateDay.getEffectWash());			} else {				mapEffectWash.put(rfid,mapEffectWash.get(rfid) + rateDay.getEffectWash());// 只会更新value的值			}	    	if (mapInRoom.get(rfid) == null) {	    		mapInRoom.put(rfid, rateDay.getInRoom());			} else {				mapInRoom.put(rfid,mapInRoom.get(rfid) + rateDay.getInRoom());// 只会更新value的值			}	    	if (mapOutRoom.get(rfid) == null) {	    		mapOutRoom.put(rfid, rateDay.getOutRoom());			} else {				mapOutRoom.put(rfid,mapOutRoom.get(rfid) + rateDay.getOutRoom());// 只会更新value的值			}	    	if (mapBeforeInBed.get(rfid) == null) {	    		mapBeforeInBed.put(rfid, rateDay.getBeforeInBed());			} else {				mapBeforeInBed.put(rfid,mapBeforeInBed.get(rfid) + rateDay.getBeforeInBed());// 只会更新value的值			}	    	if (mapLongOutBed.get(rfid) == null) {	    		mapLongOutBed.put(rfid, rateDay.getLongOutBed());			} else {				mapLongOutBed.put(rfid,mapLongOutBed.get(rfid) + rateDay.getLongOutBed());// 只会更新value的值			}		}	}	// 计算百分比	protected String getPercent(Integer tem1, Integer tem2) {		String result = "0.0";		if (!tem2.equals(0)) {			NumberFormat numberFormat = NumberFormat.getInstance();			numberFormat.setMaximumFractionDigits(1);			result = numberFormat.format((float) tem1 / (float) tem2 * 100);		}		return result;	}}